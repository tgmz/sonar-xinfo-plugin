ASMA001E Operation code not allowed to be
generated - xxxxxxxx
Explanation: An attempt was made to produce a
restricted operation code by variable symbol
substitution. Restricted operation codes are:
ACTR AGO AGOB AIF
AIFB ANOP AREAD COPY
GBLA GBLB GBLC ICTL
ISEQ LCLA LCLB LCLC
MACRO MEND MEXIT REPRO
SETA SETAF SETB SETC
SETCF
System action: The statement is ignored.
Programmer response: If you want a variable
operation code, use AIF to branch to the correct
unrestricted statement.
Severity: 8
ASMA002S Generated statement too long; statement
truncated - xxxxxxxx
Explanation: The statement generated by a macro
definition is more than 3072 characters long.
System action: The statement is truncated; the leading
1728 characters are retained.
Programmer response: Shorten the statement.
Severity: 12
ASMA003E Undeclared variable symbol; default=0,
null, or type=U - xxxxxxxx
Explanation: A variable symbol in the operand field of
the statement has not been declared (defined) in the
name field of a SET statement, in the operand field of
an LCL or GBL statement, or in a macro prototype
statement.
System action: The variable symbol is given a default
value as follows:
SETA = 0
SETB = 0
SETC = null (empty) string
If the assembler is unable to determine an appropriate
type from the context of the symbol's use, a default
type of SETC is assigned.
The type attribute (T') of the variable is given a default
value of U (undefined).
Programmer response: Declare the variable before you
use it as an operand.
Severity: 8
ASMA001E • ASMA003E
Appendix F. High Level Assembler messages 301
ASMA004E Duplicate SET symbol declaration; first
is retained - xxxxxxxx
Explanation: A SET symbol has been declared
(defined) more than once. A SET symbol is declared
when it is used in the name field of a SET statement, in
the operand field of an LCL or GBL statement, or in a
macro prototype statement.
System action: The value of the first declaration of the
SET symbol is used.
Programmer response: Eliminate the incorrect
declarations.
Severity: 8
ASMA005S No storage for macro call; continue with
open code
Explanation: An inner macro call could not be
processed because no main storage was available.
System action: The assembly continues with the next
open code statement.
Programmer response: Check whether the macro is
recursive, and, if so, whether termination is provided
for; correct the macro if necessary. If the macro is
correct, allocate more main storage.
Severity: 12
ASMA007S Previously defined sequence symbol -
xxxxxxxx
Explanation: The sequence symbol in the name field
has been used in the name field of a previous
statement.
System action: The first definition of the sequence
symbol is used; this definition is ignored.
Programmer response: Remove or change one of the
sequence symbols.
Severity: 12
ASMA008S Previously defined symbolic parameter -
xxxxxxxx
Explanation: The xxxxxxxx symbol has been used to
define two different symbolic parameters.
System action: When the parameter name (the
variable symbol) is used inside the macro definition, it
refers to the first definition of the parameter in the
prototype. However, if the second parameter defined
by the variable symbol is a positional parameter, the
count of positional operands still increases by one. The
second parameter can then be referred to only through
use of &SYSLIST.
Programmer response: Change one of the parameter
names to another variable symbol.
Severity: 12
ASMA009S System variable symbol illegally
re-defined
Explanation: A system variable symbol has been used
in the name field of a macro prototype statement. The
system variable symbols are:
&SYSADATA_DSN
&SYSADATA_MEMBER
&SYSADATA_VOLUME
&SYSASM
&SYSCLOCK
&SYSDATC
&SYSDATE
&SYSECT
&SYSIN_DSN
&SYSIN_MEMBER
&SYSIN_VOLUME
&SYSJOB
&SYSLIB_DSN
&SYSLIB_MEMBER
&SYSLIB_VOLUME
&SYSLIN_DSN
&SYSLIN_MEMBER
&SYSLIN_VOLUME
&SYSLIST
&SYSLOC
&SYSM_HSEV
&SYSM_SEV
&SYSMAC
&SYSNDX
&SYSNEST
&SYSOPT_DBCS
&SYSOPT_OPTABLE
&SYSOPT_RENT
&SYSOPT_XOBJECT
&SYSPARM
&SYSPRINT_DSN
&SYSPRINT_MEMBER
&SYSPRINT_VOLUME
&SYSPUNCH_DSN
&SYSPUNCH_MEMBER
&SYSPUNCH_VOLUME
&SYSSEQF
&SYSSTEP
&SYSSTMT
&SYSSTYP
&SYSTEM_ID
&SYSTERM_DSN
&SYSTERM_MEMBER
&SYSTERM_VOLUME
&SYSTIME
&SYSVER
System action: The name parameter is ignored. The
name on a corresponding macro instruction is not
generated.
Programmer response: Change the parameter to one
that is not a system variable symbol.
Severity: 12
ASMA010E Invalid use of symbol qualifier -
xxxxxxxx
Explanation: One of the following situations has
occurred:
v A symbol qualifier has been used to qualify a symbol
in other than:
– A machine instruction
– The nominal value of an S-type address constant
– The supporting address operand of a dependent
USING statement
v A symbol qualifier is used to qualify a symbol that
has an absolute value where a symbol that represents
a relocatable address is required
v A symbol qualifier is used to qualify a symbol that is
not within the range of the corresponding labeled
USING statement
ASMA004E • ASMA010E
302 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
v A symbol qualifier is used to qualify an undefined
symbol
v A symbol qualifier is used to qualify an incorrect
symbol
v A period is used as the last character of a term, but
the symbol preceding the period has not been
defined in the name field of a labeled USING
statement
A symbol qualifier can only be used in machine
instructions, the nominal value of S-type address
constants, or the second operand (supporting base
address) of dependent USING instructions. A symbol
qualifier can only be used to qualify symbols that are
within the range of the corresponding labeled USING.
System action: A machine instruction assembles as
zero. An assembler instruction is ignored. If there is a
further error in the statement, a message that describes
the error is issued.
Programmer response: Correct the use of the symbol
qualifier, or check the statement for the error indicated
in the following message.
Severity: 8
ASMA011E Inconsistent global declarations; first is
retained - xxxxxxxx
Explanation: A global SET variable symbol has been
defined in more than one macro definition or in a
macro definition and in the source program, and the
two definitions are inconsistent in type or dimension.
System action: The first definition encountered is
retained.
Programmer response: Assign a new SET symbol or
make the declaration compatible.
Severity: 8
ASMA012S Undefined sequence symbol - xxxxxxxx;
macro aborted
Explanation: A sequence symbol in the operand field
is not defined; that is, it is not used in the name field of
a model statement.
System action: Exit from the macro definition.
Programmer response: Define the sequence symbol or
correct the reference to it.
Severity: 12
ASMA013S ACTR counter exceeded - xxxxxxxx
Explanation: The conditional assembly loop counter
(set by an ACTR statement) has been decremented to
zero. The ACTR counter is decremented by one each
time an AIF or AGO branch is processed successfully.
The counter is halved for most errors encountered by
the macro editor phase of the assembler.
System action: Any macro expansion stops. If the
ACTR statement is in the source program, the assembly
stops.
Programmer response: Check for an AIF/AGO loop
or another type of error. (You can use the MHELP
facility, described in Chapter 6, “Diagnosing assembly
errors,” on page 143 and Appendix E, “MHELP sample
macro trace and dump,” on page 289, to trace macro
definition logic.) If there is no error, increase the initial
count on the ACTR instruction.
Severity: 12
ASMA014E Irreducible qualified expression
Explanation: The statement cannot be resolved
because two or more qualified symbols are used in a
complex relocatable expression, or two or more
qualified symbols with different symbol qualifiers are
paired in an absolute expression.
System action: A machine instruction assembles as
zero. An assembler instruction is ignored.
Programmer response: Supply an absolute expression,
or correct the qualified symbol in error.
Severity: 8
ASMA015W Literal bounds exceeded
Explanation: The expression containing the reference
to the literal:
v resolves to an address outside the bounds of the
literal
v the length of the receiving field is longer than the
length of the literal
This indicates a potential error.
System action: The instruction assembles as specified.
Programmer response: Change the expression to not
exceed the bounds.
Severity: 4
ASMA016W Literal used as the target of xxxxx
instruction
Explanation: The target of instruction xxxxx is a
literal. This indicates a potential error. xxxxx is output
in uppercase.
System action: The instruction assembles as specified.
Programmer response: Specify the instruction target
correctly. You can suppress this warning for an EX
instruction by specifying the NOEXLITW suboption of
the FLAG option.
Severity: 4
ASMA011E • ASMA016W
Appendix F. High Level Assembler messages 303
ASMA017W Undefined keyword parameter; default
to positional, including keyword -
xxxxxxxx
Explanation: A keyword parameter in a macro call is
not defined in the corresponding macro prototype
statement.
This message is also generated by a valid positional
parameter that contains an equal sign.
System action: The keyword (including the equals
sign and value) is used as a positional parameter.
Programmer response: Define the keyword in the
prototype statement, or enclose the valid positional
parameter in parentheses, or apostrophes, and adjust
the macro coding appropriately.
Severity: 4
ASMA018S Duplicate keyword in macro call; last
value is used - xxxxxxxx
Explanation: A keyword operand occurs more than
once in a macro call.
System action: The latest value assigned to the
keyword is used.
Programmer response: Eliminate one of the keyword
operands.
Severity: 12
ASMA019W Length of EQUated symbol xxxxxxxx
undefined; default=1
Explanation: The value of the length attribute
extracted for an EQUated symbol with an unspecified
length has been set to the default: 1.
System action: The instruction assembles as specified.
Programmer response: Ensure that the length attribute
of the symbol is defined.
Severity: 4
ASMA020E Illegal GBL or LCL statement - xxxxxxxx
Explanation: A global (GBL) or local (LCL) declaration
statement does not have an operand.
System action: The statement is ignored.
Programmer response: Remove the statement or add
an operand.
Severity: 8
ASMA021E Illegal SET statement - xxxxxxxx
Explanation: The operand of a SETB statement is not
0, 1, or a SETB expression enclosed in parentheses.
System action: The statement is ignored.
Programmer response: Correct the operand or delete
the statement.
Severity: 8
ASMA022I START value rounded up to required
boundary
Explanation: The value specified in the operand field
of the START instruction has been rounded up to the
required boundary.
System action: The assembly continues.
Programmer response: To stop the message occurring,
specify the required boundary for the value.
Severity: 0
ASMA023E Symbolic parameter too long - xxxxxxxx
Explanation: A symbolic parameter in this statement
is too long. It must not exceed 63 characters, including
the initial ampersand.
System action: The symbolic parameter and any
operand following it in this statement are ignored.
Programmer response: Make sure that all symbolic
parameters consist of an ampersand followed by 1 to
62 alphanumeric characters, the first of which is
alphabetic.
Severity: 8
ASMA024E Invalid variable symbol - xxxxxxxx
Explanation: One of these errors has occurred:
v A symbolic parameter or a SET symbol is not an
ampersand followed by 1 to 62 alphanumeric
characters, the first being alphabetic.
v A created SET symbol definition is not a valid SET
symbol expression enclosed in parentheses.
System action: The statement is ignored.
Programmer response: Supply a valid symbol or
expression.
Severity: 8
ASMA025S Invalid macro prototype operand -
xxxxxxxx
Explanation: The format of the operand field of a
macro prototype statement is not correct. For example,
two parameters are not separated by a comma, or a
parameter contains characters that are not permitted.
System action: The operand field of the prototype is
ignored.
Programmer response: Supply a valid operand field.
Severity: 12
ASMA017W • ASMA025S
304 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA026S Macro call operand too long; leading
characters deleted - xxxxxxxx
Explanation: An operand of a macro instruction is
more than the allowable length.
System action: The leading characters (for the
allowable length) are deleted.
Programmer response: Split the operand into two or
more operands.
Severity: 12
ASMA027S Excessive number of operands
Explanation: One of the following situations has
occurred:
v More than 32000 positional operands, keyword
operands, or both have been explicitly defined in a
macro prototype statement.
v There are more than 255 operands in a DC, DS, or
DXD statement.
System action: The excess parameters are ignored.
Programmer response: For a DC, DS, or DXD
statement, use more than one statement. For a macro
prototype statement, delete the extra operands and use
&SYSLIST to access the positional operands, or
redesign the macro definition.
Severity: 12
ASMA028E Invalid displacement
Explanation: One of the following situations has
occurred:
v The displacement field of an explicit address is not
an absolute value within the range 0 through 4095.
v The displacement field of an S-type address constant
is not an absolute value within the range 0 through
4095.
v The displacement of a long-displacement instruction
cannot be resolved to lie within the range from
-524288 to +524287.
System action: The statement or constant assembles as
zero.
Programmer response: Correct the displacement or
supply a correct USING statement containing an
absolute first operand before this statement.
Severity: 8
ASMA029E Incorrect register specification - xxxxxxxx
Explanation: The value xxxxxxxx is invalid for one of
the following reasons:
v xxxxxxxx is not an absolute value within the range 0
through 15.
v an odd register is used where an even register is
required
v a register is not specified where one is required.
System action: For machine instructions and S-type
address constants, the statement or constant assembles
as zero. For USING and DROP statements, the incorrect
register operand is ignored.
Programmer response: Specify a valid register.
Severity: 8
ASMA030E Invalid literal usage - xxxxxxxx
Explanation: A literal is used in an assembler
instruction, another literal, or a field of a machine
instruction where it is not permitted.
System action: An assembler instruction containing a
literal is generally ignored and another message,
relative to the operation code of the instruction,
appears. A machine instruction assembles as zero.
Programmer response: If applicable, replace the literal
with the name of a DC statement.
Severity: 8
ASMA031E Invalid immediate or mask field
Explanation: The value of an immediate or mask
operand of a machine instruction requires more bits to
represent it than allowed by the instruction, or the
value of the immediate operand exceeds 9 on an SRP
instruction or 15 on an MC instruction.
Immediate fields used in an arithmetic context are
allowed to be signed, those in a logical context are not;
for example:
AHI r1,-30000 is valid, but
AHI r1,50000 is not
TMH r1,50000 is valid, but
TMH r1,-30000 is not
System action: The instruction assembles as zero.
Programmer response: Use a valid immediate
operand, or specify the immediate information in a DC
statement or a literal and change the statement to a
non-immediate type.
Severity: 8
ASMA032E Relocatable value or unresolved symbol
found when absolute value required
Explanation: One of the following situations has
occurred:
v A relocatable or complex relocatable expression is
used where an absolute expression is required.
v A DSECT-based expression is used as an operand for
an address constant where an expression that
resolves into a storage address is required.
v The expression is not resolvable due to a dependency
on another symbol that is not yet resolved.
ASMA026S • ASMA032E
Appendix F. High Level Assembler messages 305
System action: A machine instruction assembles as
zero. In a DC, DS, or DXD statement, the operand in
error and the following operands are ignored.
Programmer response: Supply an absolute expression
or term, or for an address constant supply a valid
storage address expression, or remove dependency on
unresolved symbol.
Severity: 8
ASMA033I Storage alignment for xxxxxxxx
unfavorable
Explanation: An address referenced by this statement
might not be aligned to the optimal boundary for this
instruction; for example, the data referenced by a load
instruction (L) might be on a halfword boundary.
System action: The instruction assembles as written.
Programmer response: Correct the operand if it is in
error. If you are using an instruction that does not
require alignment, or you want to suppress alignment
checking for some other reason, you can specify the
NOALIGN assembler option or ACONTROL
FLAG(NOALIGN). If a particular statement is correct,
you can suppress this message by writing the statement
with an absolute displacement and an explicit base
register, as in this example:
L 1,SYM-BASE(,2)
Severity: 0
ASMA034E Operand operand beyond active USING
range by xxxx bytes
Explanation: The address of this statement does not
fall within the range of an active USING statement.
System action: The instruction assembles as zero.
Programmer response: Increase the range of the active
USING.
Severity: 8
ASMA035S Invalid delimiter - xxxxxxxx
Explanation:
1. A required delimiter in a DC, DS, or DXD statement
is missing or appears where none should be; the
error might be any of these:
v An apostrophe with an address constant.
v A left parenthesis with a non-address constant.
v A constant field not started with an apostrophe,
left parenthesis, space, or comma.
v An empty constant field in a DC.
v A missing comma or right parenthesis following
an address constant.
v A missing subfield right parenthesis in an S-type
address constant.
v A missing right parenthesis in a constant modifier
expression.
2. A parameter in a macro prototype statement was
not followed by a valid delimiter: comma, equal
sign, or space.
3. The DBCS option is on, and SO follows a variable
symbol without an intervening period.
System action: The operand or parameter in error and
the following operands or parameters are ignored.
Programmer response: Supply a valid delimiter.
Severity: 12
ASMA036W Reentrant check failed
Explanation: A machine instruction that might store
data into a control section or common area when run
has been detected. This message is generated only
when reentrant checking is requested by the assembler
option RENT or within an RSECT.
System action: The statement assembles as written.
Programmer response: If you want reentrant code,
correct the instruction. Otherwise, for a control section
that has not been defined by an RSECT instruction, you
can suppress reentrancy checking by specifying
NORENT as an assembler option. You cannot suppress
reentrancy checking for a control section defined by an
RSECT instruction.
Severity: 4
ASMA037E Illegal self-defining value - xxxxxxxx
Explanation: A decimal, binary (B), hexadecimal (X),
or character (C) self-defining term contains characters
that are not permitted or is in illegal format.
System action: In the source program, the operand in
error and the following operands are ignored. In a
macro definition, the whole statement is ignored.
Programmer response: Supply a valid self-defining
term.
Severity: 8
ASMA038S Operand value falls outside of current
section/LOCTR
Explanation: An ORG statement specifies a location
outside the control section or the LOCTR in which the
ORG is used. ORG cannot force a change to another
section or LOCTR.
System action: The statement is ignored.
Programmer response: Change the ORG statement if
it is wrong. Otherwise, insert a CSECT, DSECT, COM,
or LOCTR statement to set the location counter to the
correct section before the ORG statement is processed.
Severity: 12
ASMA033I • ASMA038S
306 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA039S Location counter error
Explanation: The maximum location counter value has
been exceeded. When the OBJECT or DECK assembler
option is specified the maximum location counter value
is X'FFFFFF'.
When the GOFF assembler option is specified the
maximum location counter value is X'7FFFFFFF'.
System action: The assembly continues, however, the
resulting code probably does not run correctly.
Programmer response: The probable cause is a high
ORG statement value or a high START statement value.
Correct the value or split up the control section.
Severity: 12
ASMA040S Missing operand
Explanation: The statement requires an operand, and
none is present.
System action: A machine instruction assembles as
zero. An assembler instruction is ignored.
Programmer response: Supply the missing operand.
Severity: 12
ASMA041E Term expected; text is unclassifiable -
xxxxxxxx
Explanation: One of these errors has occurred:
v A term was expected, but the character encountered
is not one that starts a term (letter, number, =, +, -,
*).
v A letter and an apostrophe did not introduce a valid
term; the letter is not L, C, G (DBCS option), X, or B.
System action: Another message accompanies an
assembler statement. A machine instruction assembles
as zero.
Programmer response: Check for missing punctuation,
a wrong letter on a self-defining term, a bad attribute
request, a leading comma, or a dangling comma. The
length attribute is the only one accepted here. If a
defined, scale, type, or integer attribute is needed, use a
SETA statement and substitute the variable symbol
where the attribute is needed.
Severity: 8
ASMA042W Length attribute of symbol is
unavailable; default=1 - xxxxxxxx
Explanation: This statement has a length attribute
reference to a symbol, and the length attribute of the
symbol is unavailable for one of the following reasons:
v The symbol has not been previously defined.
v The type attribute of a symbol is U.
A symbol defined by an EQU instruction has a type
attribute of U, however, a reference to its length does
not produce this message.
v The length cannot be determined due to lookahead
processing. If a statement that defines a symbol, and
references a length attribute, causes lookahead
processing, the symbol might not be assigned a
length attribute until after lookahead processing is
complete. References to the same length attribute in
subsequent conditional assembly statements, before
lookahead processing completes, might cause this
message to be produced.
System action: The L' attribute defaults to 1.
Programmer response: Ensure that the symbol is
defined. If you suspect the error might be caused
because of lookahead processing, restructure your code
so that the symbol is defined before it is referenced.
Severity: 4
ASMA043E Previously defined symbol - xxxxxxxx
Explanation: The symbol in a name field or in the
operand field of an EXTRN or WXTRN statement was
defined (used as a name or an EXTRN/WXTRN
operand) in a previous statement.
System action: The name or EXTRN/WXTRN
operand of this statement is ignored. The following
operands of an EXTRN or WXTRN are processed. The
first occurrence of the symbol defines it.
Programmer response: Correct a possible spelling
error, or change the symbol.
Severity: 8
ASMA044E Undefined symbol - xxxxxxxx
Explanation: A symbol in the operand field has not
been defined, that is, used in the name field of another
statement, the operand field of an EXTRN or WXTRN,
or, in the case of a literal, the operand of a previously
processed machine instruction statement.
System action: A machine instruction or an address
constant assembles as zero. In a DC, DS, or DXD
statement or in a duplication-factor or length- modifier
expression, the operand in error and the following
operands are ignored. In an EQU statement, zero is
assigned as the value of the undefined symbol. Any
other instruction is not processed.
Programmer response: Define the symbol, or remove
the references to it.
Severity: 8
ASMA039S • ASMA044E
Appendix F. High Level Assembler messages 307
ASMA045W Register or label not previously used -
xxxxxxxx
Explanation: A register or label specified in a DROP
statement has not been previously specified in a USING
statement.
System action: Registers or labels not active at the
time are ignored.
Programmer response: Remove the unreferenced
registers or label from the DROP statement. You can
drop all active base registers and labels at once by
specifying DROP with a blank operand.
Severity: 4
ASMA046E Bit 7 of CCW flag byte must be zero
Explanation: Bit 7 of the flag byte of a channel
command word specified by a CCW, CCW0, or CCW1
statement is not zero.
System action: The CCW, CCW0, or CCW1 assembles
as zero.
Programmer response: Set bit 7 of the flag byte to
zero to suppress this message during the next assembly.
Severity: 8
ASMA047E Severity code too large
Explanation: The severity code (first operand) of an
MNOTE statement is not * or an unsigned decimal
number from 0 to 255.
System action: The statement is printed in standard
format instead of MNOTE format. The MNOTE is
given the severity code of this message.
Programmer response: Choose a severity code of * or
a number less than or equal to 255, or check for a
generated severity code.
Severity: 8
ASMA048E ENTRY error - xxxxxxxx
Explanation: One of the following errors was detected
in the operand of an ENTRY statement:
v Duplicate symbol (previous ENTRY)
v Symbol defined in a DSECT or COM section
v Symbol defined by a DXD statement
v Undefined symbol
v Symbol defined by an absolute or complex
relocatable EQU statement
v Symbol lies outside the bounds of the section in
which it is defined
System action: The external symbol dictionary output
is suppressed for the symbol.
Programmer response: Define the ENTRY operand
correctly.
Severity: 8
ASMA049W Illegal range on ISEQ
Explanation: If this message is accompanied by
another, this one is advisory. If it appears by itself, it
indicates one of the following errors:
v An operand value is less than 1 or greater than 80, or
the second operand (rightmost column to be
checked) is less than the first operand (extreme left
column to be checked).
v More or fewer than two operands are present, or an
operand is null (empty).
v An operand expression contains an undefined
symbol.
v An operand expression is not absolute.
v The statement is too complex. For example, it might
have forward references or cause an arithmetic
overflow during evaluation.
v The statement is circularly defined.
System action: Sequence checking stops.
Programmer response: Supply valid ISEQ operands.
Also, be sure that the records following this statement
are in order; they have not been sequence checked.
Severity: 4
ASMA050E Illegal name field; name discarded -
xxxxxxxx
Explanation: One of these errors has occurred:
v The name field of a macro prototype statement
contains an incorrect symbolic parameter (variable
symbol)
v The name field of a COPY statement in a macro
definition contains an entry other than space or a
valid sequence symbol
System action: The incorrect name field is ignored.
Programmer response: Correct the incorrect name
field.
Severity: 8
ASMA051E Illegal statement outside a macro
definition
Explanation: A MEND, MEXIT, ASPACE, AEJECT, or
AREAD statement appears outside a macro definition.
System action: The statement is ignored.
Programmer response: Remove the statement or, if a
macro definition is intended, insert a MACRO
statement.
Severity: 8
ASMA045W • ASMA051E
308 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA052S Record out of sequence - xxxxxxxx
Explanation: Input sequence checking, under control
of the ISEQ assembler instruction, has determined that
this statement is out of sequence. The sequence number
of the statement is appended to the message.
System action: The statement assembles normally.
However, the sequence number of the next statement is
checked relative to this statement.
Programmer response: Put the statements in correct
sequence. If you want a break in sequence, put in a
new ISEQ statement and sequence number. ISEQ
always resets the sequence number; the record
following the ISEQ is not sequence checked.
Severity: 12
ASMA053W Blank sequence field - xxxxxxxx
Explanation: Input sequence checking, controlled by
the ISEQ assembler statement, has detected a statement
with a blank sequence field. The sequence number of
the last numbered statement is appended to the
message.
System action: The statement assembles normally. The
sequence number of the next statement is checked
relative to the last statement having a non-blank
sequence field.
Programmer response: Put the correct sequence
number in the statement or discontinue sequence
checking over the blank statements with an ISEQ
statement that has a blank operand.
Severity: 4
ASMA054E Illegal continuation record
Explanation: A statement has more than 10 records or
end-of-input has been encountered when a continuation
record was expected.
System action: The records already read are processed
as is. If the statement had more than 10 records, the
next record is treated as the beginning of a new
statement.
Programmer response: In the first case, break the
statement into two or more statements. In the second
case, ensure that a continued statement does not span
the end of a library member. Check for lost records or
an extraneous continuation character.
Severity: 8
ASMA055S Recursive COPY
Explanation: A nested COPY statement (COPY within
another COPY) attempted to copy a library member
already being copied by a higher level COPY within
the same nest.
System action: This COPY statement is ignored.
Programmer response: Correct the operand of this
COPY if it is wrong, or rearrange the nest so that the
same library member is not copied by COPY
statements at two different levels.
Severity: 12
ASMA056W Absolute value found when relocatable
value expected - xxxxxxxx
Explanation: An absolute expression has been used as
the immediate field in a branch-relative instruction. The
immediate field in a branch-relative instruction is used
as signed number of halfwords relative to the current
location counter. The use of an absolute expression for
this value can cause unpredictable results.
System action: The instruction assembles as written.
Programmer response: Supply a relocatable
expression.
Severity: 4
ASMA057E Undefined operation code - xxxxxxxx
Explanation: One of the following errors has occurred:
v The operation code of this statement is not a valid
machine or assembler instruction or macro name.
v In an OPSYN statement, this operand symbol is
undefined or illegal or, if no operand is present, the
name field symbol is undefined.
v On z/VSE the High Level Assembler only reads
library macros that have a member type of A, or if
the // OPTION SUBLIB=DF statement is used, a
member type of D. Edited (E-Deck) macros, that have
a member type of E or F can only be read by a
LIBRARY exit.
System action: The statement is ignored. OPSYN does
not search the macro library for an undefined operand.
Programmer response: Correct the statement. In the
case of an undefined macro instruction, the wrong data
set might have been specified for the macro library. In
the case of OPSYN, a previous OPSYN or macro
definition might have failed to define the operation
code.
If the operation code shown is a z/VSE edited macro
(E-Deck), High Level Assembler can only find and read
it with a LIBRARY exit. You might want to use the
z/VSE supplied LIBRARY exit described in VSE/ESA
Guide to System Functions.
Severity: 8
ASMA058E Invalid relative address - xxxxxxxx
Explanation: One of the following situations has
occurred:
v The relative address is an odd value, and therefore
cannot be represented as a number of halfwords.
ASMA052S • ASMA058E
Appendix F. High Level Assembler messages 309
v The NOGOFF option has been specified and the
relative address is not in the same control section as
the instruction.
v The relative address has the same relocatability
attribute as the instruction, but is outside the control
section.
System action: The instruction assembles as zero.
Programmer response: Supply a valid relative address
that is on a halfword boundary and within the same
control section. To allow a relative address that is
outside the current control section, specify the GOFF
option.
Severity: 8
ASMA059C Illegal ICTL - xxxxxxxx
Explanation: An ICTL statement has one of the
following errors:
v The operation code was created by variable symbol
substitution
v It is not the first statement in the assembly
v The value of one or more operands is incorrect
v An operand is missing
v A character is detected in the operand field that is
not permitted
System action: The ICTL statement is ignored.
Assembly continues with standard ICTL values.
Programmer response: Correct or remove the ICTL.
The begin column must be 1-40; the end column must
be 41-80 and at least five greater than the begin
column; and the continue column must be 2-40.
Severity: 16
ASMA060S COPY code not found - xxxxxxxx
Explanation: (1) If this message is on a COPY
statement and no text is printed with it, one of the
following occurred:
v The library member was not found.
v The lookahead phase previously processed the COPY
statement and did not find the library member, the
copy was recursive, or the operand contains a
variable symbol. Variable symbols can be used if the
COPY statement is in open code.
(2) If this message is not on a COPY statement, but has
a library member name printed with it, the lookahead
phase of the assembler could not find the library
member because the name is undefined or contains a
variable symbol.
System action: The COPY statement is ignored; the
library member is not copied.
Programmer response: Check that the correct macro
library was assigned, or check for a possible misspelled
library member name.
If COPY member is not defined in any macro library,
and is not processed because of an AGO or AIF
assembler instruction, add a dummy COPY member
with the name to the macro library.
Severity: 12
ASMA061E Symbol not name of DSECT, DXD, or
external label
Explanation: The operand of a Q-type address
constant is not a symbol or the name of a DSECT or
DXD statement, or an external label.
System action: The constant assembles as zero.
Programmer response: Supply a valid operand.
Severity: 8
ASMA062E Illegal operand format - xxxxxxxx
Explanation: One of the following errors has occurred:
v ADATA—more than five operands are specified, or
the value of one of the expressions specified in one
of the first four operands is outside the range -231 to
+231-1, or the fifth operand is not a valid character
expression
v ACONTROL—one or more of the operands supplied
is invalid
v AINSERT—the first operand is not a valid string, or
the second operand is not BACK or FRONT
v AMODE—the operand does not specify 24, 31, or
ANY
v AREAD—the operand specifies an incorrect AREAD
operand.
v DROP or USING—more than 16 registers are
specified in the operand field
v EXITCTL—more than five operands are specified, or
the first operand is not a valid exit type, or the value
of one of the expressions specified in the second and
subsequent operands is outside the range -231 to
+231-1
v MNOTE—the syntax of the severity code (first
operand) is not correct, or the sum of the length of
the operands including quotes and commas exceeds
1024 bytes
v PRINT—an operand specifies an incorrect print
option
v PUSH or POP—an operand does not specify a
PRINT or USING statement
v RMODE—the operand does not specify 24 or ANY
v TITLE—more than 100 bytes were specified
System action: The first 16 registers in a DROP or
USING statement are processed. The operand in error
and the following operands of a PUSH, POP, or PRINT
statement are ignored. The AMODE or RMODE
instruction is ignored, and the name field (if any) does
not appear in the cross-reference listing. The first 100
bytes of the operand of the TITLE instruction are used
as the title.
Programmer response: Supply a valid operand field.
ASMA059C • ASMA062E
310 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
Severity: 8
ASMA063E No ending apostrophe - xxxxxxxx
Explanation: The apostrophe terminating an operand
is missing, or the standard value of a keyword
parameter of a macro prototype statement is missing.
System action: The operand or standard value in error
is ignored. If the error is in a macro definition model
statement, the whole statement is ignored.
Programmer response: Supply the missing
apostrophe.
Severity: 8
ASMA064S Floating point characteristic out of range
Explanation: A converted floating-point constant is
too large or too small for the processor. The allowable
range is approximately 5.4x10-79 to 7.2x1075..
System action: The constant assembles as zero.
Programmer response: Check the characteristic
(exponent), exponent modifier, scale modifier, and
mantissa (fraction) for validity. Remember that a
floating-point constant is rounded, not truncated, after
conversion.
Severity: 12
ASMA065E Unknown type - xxxxxxxx
Explanation: An unknown constant type has been
used in a DC or DS statement or in a literal, or the
assembler option required to support the constant type
has not been supplied.
System action: The operand in error and the following
operands are ignored.
Programmer response: Supply a valid constant or the
required assembler option. Look for an incorrect type
code or incorrect syntax in the duplication factor.
Severity: 8
ASMA066W 2-byte relocatable address constant
Explanation: This statement contains a relocatable
Y-type address constant or a 2-byte relocatable A-type
address constant. Addressing errors occur if the address
constant is used to refer to a storage address equal to
or greater than 64 KB (65,536 bytes).
System action: The statement assembles as written.
Programmer response: If the address constant is used
to refer to a storage address less than 64 KB (65,536
bytes), the 2-byte relocatable address constant is valid.
You can use the assembler option RA2 to suppress this
message.
Severity: 4
ASMA067S Illegal duplication factor - xxxxxxxx
Explanation: One of the following errors has occurred:
v A literal has a zero duplication factor
v The duplication factor of a constant is greater than
the maximum of 224-1 bytes
v A duplication factor expression of a constant is not
correct
System action: The operand in error and the following
operands of a DC, DS, or DXD statement are ignored.
The statement containing the literal assembles as zero.
Programmer response: Supply a valid duplication
factor. If you want a zero duplication factor, write the
literal as a DC statement.
Severity: 12
ASMA068S Length error - xxxxxxxx
Explanation: One of the following errors has occurred:
v The length modifier of a constant is wrong
v The C, X, B, Z, or P-type constant is too long
v An operand is longer than 224-1 bytes
v A relocatable address constant has an illegal length
v The length field in a machine instruction is not
correct or is out of the permissible range
v The length modifier of a Character Unicode constant
is not a multiple of 2
System action:
v A machine instruction assembles as zero
v A new floating point constant assembles as zero
v An address constant is truncated
v For other DC, DS, or DXD statements, the operand in
error and the following operands are ignored
v The operand in error, and the operands following,
are ignored.
Programmer response: Supply a valid length or
correct the length modifier.
Severity: 12
ASMA069S Length of second operand must be less
than length of first
Explanation: The length of the second operand must
be less than the length of the first operand. If it is not,
a specification exception is recognized.
System action: The machine instruction assembles as
zero.
Programmer response: Supply a second operand with
a length which is less than that of the first operand.
Severity: 12
ASMA063E • ASMA069S
Appendix F. High Level Assembler messages 311
ASMA070E Scale modifier error - xxxxxxxx
Explanation: A scale modifier in a constant is used
illegally, is out of range, or is relocatable, or there is an
error in a scale modifier expression.
System action: If the scale modifier is out of range, it
defaults to zero. Otherwise, the operand in error and
the following operands are ignored.
Programmer response: Supply a valid scale modifier.
Severity: 8
ASMA071E Exponent modifier error
Explanation: The constant contains multiple internal
exponents, the exponent modifier is out of range or
relocatable, or the sum of the exponent modifier and
the internal exponent is out of range.
System action: If the constant contains multiple
internal exponents, the operand in error and the
following operands are ignored. Otherwise, the
exponent modifier defaults to zero.
Programmer response: Change the exponent modifier
or the internal exponent.
Severity: 8
ASMA072E Data item too large
Explanation: The value of a Y-type address constant
or H-type constant is larger than 215-1 or smaller than
-215, or the value of an F-type constant is larger than
231-1 or smaller than -231.
System action: The constant is truncated. The
high-order bits are lost.
Programmer response: Supply a smaller scale
modifier, a longer constant, or a smaller value.
Severity: 8
ASMA073E Precision lost
Explanation: The modifiers of a floating-point number
either truncate the exponent or shift the fraction out of
the converted constant.
System action: The constant assembles with an
exponent but with a fraction of zero.
Programmer response: Change the modifier or use a
longer constant type.
Severity: 8
ASMA074E Illegal syntax in expression - xxxxxxxx
Explanation: An expression has two terms or two
operations in succession, or incorrect or missing
characters or delimiters.
System action: In a DC, DS, or DXD statement, the
operand in error and the following operands are
ignored. In a macro definition, the whole statement is
ignored. A machine instruction assembles as zero.
Programmer response: Check the expression for
typing errors, or for missing or incorrect terms or
characters.
Severity: 8
ASMA075E Arithmetic overflow
Explanation: The intermediate or final value of an
expression is not within the range -231 through 231-1.
System action: A machine instruction assembles as
zero; an assembler instruction is ignored; a conditional
assembly expression uses zero as the result.
Programmer response: Change the expression.
Severity: 8
ASMA076E Statement complexity exceeded
Explanation: The complexity of this statement caused
the assembler's expression evaluation work area to
overflow.
System action: A machine instruction assembles as
zero. An assembler instruction is ignored.
Programmer response: Reduce the number of terms,
levels of expressions, or references to complex
relocatable EQU names.
Severity: 8
ASMA077E Circular definition
Explanation: The value of a symbol in an expression
is dependent on itself, either directly or indirectly,
through one or more EQU statements. In the following
example:
A EQU B
B EQU C
C EQU A
A is circularly defined.
System action: The value of the EQU statement
defaults to the current value of the location counter. All
other EQU statements involved in the circularity are
defaulted in terms of this one.
Programmer response: Supply a correct definition.
Severity: 8
ASMA078E Operand op expression complexly
relocatable - expr
Explanation: The expression specified is complexly
relocatable, but an absolute or simply relocatable
expression is required.
ASMA070E • ASMA078E
312 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
System action: The instruction assembles as zero.
Programmer response: Correct the expression.
Severity: 8
ASMA079E Illegal PUSH-POP
Explanation: More POP assembler instructions than
PUSH instructions have been encountered.
System action: This POP instruction is ignored.
Programmer response: Eliminate a POP statement, or
add another PUSH statement.
Severity: 8
ASMA080E Statement is unresolvable
Explanation: A statement cannot be resolved, because
it contains a complex relocatable expression or because
the location counter has been circularly defined.
System action: The statement is ignored.
Programmer response: Untangle the forward
references or check the complex relocatable EQU
statements.
Severity: 8
ASMA081E Created SET symbol exceeds 63
characters - xxxxxxxx
Explanation: A SET symbol created by variable
symbol substitution is longer than 63 characters
(including the ampersand as the first character).
System action: If the symbol is in the operand field of
a SET, AIF, or AGO statement, its value is set to zero or
null, and the type attribute is set to undefined (U). If
the symbol is in the operand field of a GBL, or LCL
statement or the name field of a SET statement,
processing of the macro stops.
Programmer response: Shorten the symbol.
Severity: 8
ASMA082E Created SET symbol is null - xxxxxxxx
Explanation: A SET symbol created by variable
symbol substitution is null (empty string).
System action: If the symbol is in the operand field of
a SET, AIF, or AGO statement, its value is set to zero or
null, and the type attribute is set to undefined (U). If
the symbol is in the operand field of a GBL, or LCL
statement or the name field of a SET statement,
processing of the macro stops.
Programmer response: Supply a valid symbol.
Severity: 8
ASMA083E Created SET symbol is not a valid
symbol - xxxxxxxx
Explanation: A SET symbol created by variable
symbol substitution or concatenation does not consist
of an ampersand followed by up to 62 alphanumeric
characters, the first of which is alphabetic.
System action: If the symbol is in the operand field of
a SET, AIF, or AGO statement, its value is set to zero or
null, and the type attribute is set to undefined (U). If
the symbol is in the operand field of a GBL or LCL
statement or the name field of a SET statement,
processing of the macro stops.
Programmer response: Supply a valid symbol.
Severity: 8
ASMA084S Generated name field exceeds 63
characters; discarded - xxxxxxxx
Explanation: The name field on a generated statement
is longer than 63 characters.
System action: The name field is not generated. The
rest of the statement assembles normally.
Programmer response: Shorten the generated name to
63 characters or fewer.
Severity: 12
ASMA085I Generated operand field is null -
xxxxxxxx
Explanation: The operand field of a generated
machine instruction is null (empty). This message is not
issued for generated macro instructions.
System action: The statement assembles as though no
operand were specified.
Programmer response: Provide a non-empty operand
field. If you want the statement assembled with no
operand, substitute a comma rather than leave the
operand blank.
Severity: 0
ASMA086S Missing MEND generated - xxxxxxxx
Explanation: A macro definition, appearing in the
source program or being read from a library by a
macro call or a COPY statement, ends before a MEND
statement is encountered to end it.
System action: A MEND statement is generated. The
portion of the macro definition read in is processed.
Programmer response: Insert the MEND statement if
it was omitted. Otherwise, check if all the macro
definition is on the library.
Severity: 12
ASMA079E • ASMA086S
Appendix F. High Level Assembler messages 313
ASMA087S Generated operation code is null -
xxxxxxxx
Explanation: The operation code of a generated
statement is null (blank).
System action: The generated statement is printed but
not assembled.
Programmer response: Provide a valid operation code.
Severity: 12
ASMA088E Unbalanced parentheses in macro call
operand - xxxxxxxx
Explanation: Excess left or too few right parentheses
occur in an operand (parameter) of a macro call
statement.
System action: The parameter corresponding to the
operand in error is given a null (empty) value.
Programmer response: Balance the parentheses.
Severity: 8
ASMA089E Arithmetic expression contains illegal
delimiter or ends prematurely - xxxxxxxx
Explanation: An arithmetic expression contains an
incorrect character or an arithmetic subscript ends
without enough right parentheses.
System action: The statement is ignored.
Programmer response: Supply a valid expression.
Severity: 8
ASMA090E Excess right parenthesis in macro call
operand - xxxxxxxx
Explanation: A right parenthesis without a
corresponding left parenthesis was detected in an
operand of a macro instruction.
System action: The excess right parenthesis is ignored.
The macro expansion might be incorrect.
Programmer response: Insert the correct parenthesis.
Severity: 8
ASMA091E Character string exceeds maximum
length; truncated to maximum -
xxxxxxxx
Explanation: The value of the operand of a SETC or
SETCF statement or the character relational operand of
an AIF statement is longer than 1024 characters. This
might occur before substrings are evaluated.
System action: The first 1024 characters are used.
Programmer response: Shorten the SETC or SETCF
expression value or the operand value.
Severity: 8
ASMA092E Substring expression 1 points past string
end; default=null - xxxxxxxx
Explanation: The first arithmetic expression of a SETC
substring points beyond the end of the expression
character string.
System action: The substring is given a null value.
Programmer response: Supply a valid expression.
Severity: 8
ASMA093E Substring expression 1 less than 1;
default=null - xxxxxxxx
Explanation: The first arithmetic expression of a SETC
substring is less than one; that is, it points before the
expression character string.
System action: The substring expression defaults to
null.
Programmer response: Supply a valid expression.
Severity: 8
ASMA094I Substring goes past string end;
default=remainder
Explanation: The second expression of a substring
notation specifies a length that extends beyond the end
of the string.
System action: The result of the substring operation is
a string that ends with the last character in the
character string.
Programmer response: Make sure the arithmetic
expression used to specify the length does not specify
characters beyond the end of the string. Either change
the first or the second expression in the substring
notation. You can use the assembler option
FLAG(NOSUBSTR) to suppress this message.
Severity: 0
ASMA095W Substring expression 2 less than 0;
default=null - xxxxxxxx
Explanation: The second arithmetic expression of a
SETC substring is less than or equal to zero.
System action: No characters (a null string) from the
substring character expression are used.
Programmer response: Supply a valid expression.
Severity: 4
ASMA087S • ASMA095W
314 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA096E Unsubscripted SYSLIST;
default=SYSLIST(1) - xxxxxxxx
Explanation: The system variable symbol, &SYSLIST,
is not subscripted. &SYSLIST(n) refers to the nth
positional parameter in a macro instruction.
N'&SYSLIST does not have to be subscripted.
System action: The subscript defaults to one so that it
refers to the first positional parameter.
Programmer response: Supply the correct subscript.
Severity: 8
ASMA097E Invalid attribute reference to SETA or
SETB symbol; default=U or 0 - xxxxxxxx
Explanation: A length (L'), scaling (S'), integer (I'), or
defined (D') attribute refers to a SETA or SETB symbol.
System action: The attributes are set to default values:
L'=0, S'=0, I'=0 ,and D'=0.
Programmer response: Change or remove the attribute
reference.
Severity: 8
ASMA098E Attribute reference to invalid symbol;
default=U or 0 - xxxxxxxx
Explanation: An attribute attempted to reference a
symbol that is not correct or has a null value. (A valid
symbol is 1 to 63 alphanumeric characters, the first of
which is alphabetic.)
System action: For a type (T') attribute, defaults to U.
For all other attributes, defaults to 0.
Programmer response: Supply a valid symbol.
Severity: 8
ASMA099W Wrong type of constant for S or I
attribute reference; default=0 - xxxxxxxx
Explanation: An integer (I') or scaling (S') attribute
references a symbol whose type is other than
floating-point (E,D,L), decimal (P,Z), or fixed-point
(H,F).
System action: The integer or scaling attribute
defaults to zero.
Programmer response: Remove the integer or scaling
attribute reference or change the constant type.
Severity: 4
ASMA100E Subscript less than 1; default to
subscript=1 - xxxxxxxx
Explanation: The subscript of a subscripted SET
symbol in the name field of a SET statement, the
operand field of a GBL or LCL statement, or an
&SYSLIST statement is less than 1.
System action: The subscript defaults to 1.
Programmer response: Supply the correct subscript.
Severity: 8
ASMA101E Subscript less than 1; default to value=0
or null - xxxxxxxx
Explanation: The subscript of a SET symbol in the
operand field is less than 1.
System action: The value is set to zero or null.
Programmer response: Supply a valid subscript.
Severity: 8
ASMA102E Arithmetic term is not self-defining
term; default=0 - xxxxxxxx
Explanation: A SETC term or expression used as an
arithmetic term is not a valid self-defining term.
System action: The value of the SETC term or
expression is set to zero.
Programmer response: Make the SETC a self-defining
term, such as C'A', X'1EC', B'1101', or 27. The C, X, or B
and the apostrophes must be part of the SETC value.
Severity: 8
ASMA103E Multiplication overflow; default
product=1 - xxxxxxxx
Explanation: A multiplication overflow occurred in a
macro definition statement.
System action: The value of the expression up to the
point of overflow is set to one; evaluation continues.
Programmer response: Change the expression so that
overflow does not occur; break it into two or more
operations, or regroup the terms by parentheses.
Severity: 8
ASMA104W Statement processing incomplete
Explanation: This indicates that a previously flagged
error has terminated processing for this statement.
System action: The assembly continues.
Programmer response: Correct previous errors.
Severity: 4
ASMA105U Arithmetic expression too complex
Explanation: An arithmetic expression in a macro
definition statement caused an internal workarea
overflow because it is too complex; that is, it has too
many terms, levels, or both.
ASMA096E • ASMA105U
Appendix F. High Level Assembler messages 315
System action: The assembly stops.
Programmer response: Simplify the expression or
break it into two or more expressions.
Severity: 20
ASMA106E Wrong target symbol type; value left
unchanged - xxxxxxxx
Explanation: The SET symbol in the name field has
already been declared, and is a different type to the
type of SETx instruction. For example, you might have
previously declared a SET symbol as arithmetic (SETA),
and you are attempting to use the SET symbol as the
target of a SETC instruction.
System action: The statement is ignored.
Programmer response: Make the declaration agree
with the SET statement type. If you want to store
across SET symbol types, first store into a SET symbol
of matching type, and then use another SETx
instruction to store the value, represented by the
matching SET symbol, into the non- matching SET
symbol.
Severity: 8
ASMA107E Inconsistent dimension on target
symbol; subscript ignored, or 1 used -
xxxxxxxx
Explanation: The SET symbol in the name field is
dimensioned (subscripted), but was not declared in a
GBL or LCL statement as dimensioned, or vice versa.
System action: The subscript is ignored or a subscript
of 1 is used, in accordance with the declaration.
Programmer response: Make the declaration and the
usage compatible. You can declare a local SET symbol
as dimensioned by using it, subscripted, in the name
field of a SET statement.
Severity: 8
ASMA108E Inconsistent dimension on SET symbol
reference; default = 0, null, or type=U -
xxxxxxxx
Explanation: A SET symbol in the operand field is
dimensioned (subscripted), but was not declared in a
GBL or LCL statement as dimensioned, or vice versa.
System action: A value of zero or null is used for the
subscript. If the type attribute of the SET symbol is
requested, it is set to U.
Programmer response: Make the declaration and the
usage compatible. You can declare a SET symbol as
dimensioned by using it, subscripted, in the name field
of a SET statement.
Severity: 8
ASMA109E Multiple SET operands for
undimensioned SET symbol; gets last
operand - xxxxxxxx
Explanation: Multiple operands were assigned to an
undimensioned (unsubscripted) SET symbol.
System action: The SET symbol is given the value of
the last operand.
Programmer response: Declare the SET symbol as
dimensioned, or assign only one operand to it.
Severity: 8
ASMA110S Library macro first statement not
'MACRO' or comment
Explanation: A statement other than a comment
statement preceded a MACRO statement in a macro
definition read from a library.
System action: The macro definition is not read from
the library. A corresponding macro call cannot be
processed.
Programmer response: Ensure that the library macro
definition begins with a MACRO statement preceded
(optionally) by comment statements only.
Severity: 12
ASMA111S Invalid AIF or SETB operand field -
xxxxxxxx
Explanation: The operand of an AIF or SETB
statement either does not begin with a left parenthesis
or is missing altogether.
System action: The statement is ignored.
Programmer response: Supply a valid operand.
Severity: 12
ASMA112S Invalid sequence symbol - xxxxxxxx
Explanation: One of the following errors has occurred:
v A sequence symbol does not begin with a period
followed by one to 62 alphanumeric characters, the
first being alphabetic.
v A sequence symbol in the name field was created by
substitution.
v Operand of AGO is blank or sequence symbol in AIF
is blank.
System action: The sequence symbol in the name field
is ignored. A sequence symbol in the operand field of
an AIF or AGO statement causes the whole statement
to be ignored.
Programmer response: Supply a valid sequence
symbol.
Severity: 12
ASMA106E • ASMA112S
316 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA113S Continue column blank
Explanation: A SET symbol declaration in a GBL or
LCL statement began with an ampersand in the end
column (normally column 71) of the previous record,
but the continue column (normally column 16) of this
record is blank.
System action: This record and any following records
of the statement are ignored. Any SET symbols that
completely appear on the previous record or records
are processed normally.
Programmer response: Begin this record in the
continuation indicator field.
Severity: 12
ASMA114S Invalid COPY operand - xxxxxxxx
Explanation: The operand of a COPY statement is not
a symbol of 1 to 8 alphanumeric characters, the first
being alphabetic.
System action: The COPY statement is ignored.
Programmer response: Supply a valid operand. In
open code the operand can be specified as a previously
defined SET symbol.
Severity: 12
ASMA115S COPY operand too long - xxxxxxxx
Explanation: The symbol in the operand field of a
COPY statement is more than 8 characters long.
System action: The COPY statement is ignored.
Programmer response: Supply a valid operand.
Severity: 12
ASMA116E Illegal SET symbol - xxxxxxxx
Explanation: A SET symbol in the operand field of a
GBL or LCL statement or in the name field of a SET
statement does not consist of an ampersand followed
by one to 62 alphanumeric characters, the first being
alphabetic.
System action: For a GBL or LCL statement, the
incorrect SET symbol and all following SET symbols in
a GBL or LCL statement are ignored. For a SET
statement, the whole SET statement is ignored.
Programmer response: Supply a SET symbol.
Severity: 8
ASMA117E Illegal subscript - xxxxxxxx
Explanation: The subscript following a SET symbol
contained unbalanced parentheses or an incorrect
arithmetic expression.
System action: This statement is ignored.
Programmer response: Supply an equal number of left
and right parentheses or a valid arithmetic expression.
Severity: 8
ASMA118S Source macro ended by 'MEND' in
COPY code
Explanation: A library member, being copied by a
COPY statement within a macro definition, contained a
MEND statement.
System action: The MEND statement is honored and
the macro definition stops. No more COPY code is
read. The statements brought in before the end of the
COPY code are processed.
Programmer response: Make sure that each library
member to be used as COPY code contains balanced
MACRO and MEND statements.
Severity: 12
ASMA119S Too few MEND statements in COPY
code
Explanation: A macro definition is started in a library
member brought in by a COPY statement and the
COPY code ends before a MEND statement is
encountered.
System action: A MEND statement is generated to
end the macro definition. The statements brought in
before the end of the COPY code are processed.
Programmer response: Check to see if part of the
macro definition was lost. Also, ensure that each macro
definition to be used as COPY code contains balanced
MACRO and MEND statements.
Severity: 12
ASMA120S EOD where continuation record
expected
Explanation: An end-of-data occurred when a
continuation record was expected.
System action: The portion of the statement read in is
assembled. The assembly stops if the end-of-data is on
the PRIMARY INPUT. If a library member is being
copied, the assembly continues with the statement after
the COPY statement.
Programmer response: Check to determine whether
any statements were omitted from the source program
or from the COPY code.
Severity: 12
ASMA113S • ASMA120S
Appendix F. High Level Assembler messages 317
ASMA121S Insufficient storage for editor work area
Explanation: The macro editor module of the
assembler cannot get enough main storage for its work
areas.
System action: The assembly stops.
Programmer response: Split the assembly into two or
more parts or give the macro editor more working
storage.
on z/OS or CMS, this can be done by increasing the
region size for the assembler, decreasing blocking factor
or block size on the assembler data sets, or a
combination of both.
On z/VSE, this can be done by decreasing the value
you specify on the SIZE parameter of the JCL EXEC
statement, or by running the assembly in a larger
partition.
Severity: 12
ASMA122S Illegal operation code format
Explanation: The operation code is not followed by a
space or is missing altogether, or the first record of a
continued source statement is missing.
System action: The statement is ignored.
Programmer response: Ensure that the statement has a
valid operation code and that all records of the
statement are present.
Severity: 12
ASMA123S Variable symbol too long - xxxxxxxx
Explanation: A SET symbol, symbolic parameter, or
sequence symbol contains more than 62 characters
following the ampersand or period.
System action: This statement is ignored.
Programmer response: Shorten the SET symbol or
sequence symbol.
Severity: 12
ASMA124S Illegal use of symbolic parameter - name
Explanation: A symbolic parameter was used in the
operand field of a GBL or LCL statement or in the
name field of a SET statement. In other words, a
variable symbol has been used both as a symbolic
parameter and as a SET symbol.
System action: The statement is ignored.
Programmer response: Change the variable symbol to
one that is not a symbolic parameter.
Severity: 12
ASMA125S Illegal macro name - macro uncallable -
xxxxxxxx
Explanation: The operation code of a macro prototype
statement is not a valid symbol; that is, one to 63
alphanumeric characters, the first alphabetic.
System action: The macro definition is edited.
However, since the macro name is not correct, the
macro cannot be called.
Programmer response: Supply a valid macro name.
Severity: 12
ASMA126S Library macro name incorrect - xxxxxxxx
Explanation: The operation code of the prototype
statement of a library macro definition is not the same
as the operation code of the macro instruction (call).
Library macro definitions are located by their member
names. However, the assembler compares the macro
instruction with the macro prototype.
System action: The macro definition is edited using
the operation code of the prototype statement as the
macro name. Thus, the definition cannot be called by
this macro instruction.
Programmer response: Ensure that the member name
of the macro definition is the same as the operation
code of the prototype statement. This normally requires
listing the macro definition from the library, use of the
LIBMAC option to cause the macro definition to be
listed, or a COPY of the member name.
Severity: 12
ASMA127S Illegal use of ampersand
Explanation: One of the following errors has occurred:
v An ampersand was found where all substitution
should have already been done
v The standard value of a keyword parameter in a
macro prototype statement contained a single
ampersand or a string with an odd number of
ampersands
v An unpaired ampersand occurred in a character (C)
constant
System action: In a macro prototype statement, all
information following the error is ignored. In other
statements, the action depends on which field the error
occurred in. If the error occurred in the name field, the
statement is processed without a name. If the error
occurred in the operation code field, the statement is
ignored. If the error occurred in the operand field,
another message is issued to specify the default.
However, if the error occurred in a C-type constant, the
operand in error and the following operands are
ignored.
Programmer response: Ensure that ampersands used
in keyword standard values or in C-type constant
values occur in pairs. Also, avoid substituting an
ASMA121S • ASMA127S
318 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ampersand into a statement unless there is a double
ampersand.
Severity: 12
ASMA128S Excess right parenthesis - xxxxxxxx
Explanation: An unpaired right parenthesis has been
found.
System action: A machine instruction assembles as
zero. An assembler instruction is ignored and an
additional message relative to the statement type
appears. However, if the error is in the standard value
of a keyword on a macro prototype statement, only the
operands in error and the following operands are
ignored.
Programmer response: Make sure that all parentheses
are paired.
Severity: 12
ASMA129S Insufficient right parentheses - xxxxxxxx
Explanation: An unpaired left parenthesis has been
found. Parentheses must balance at each comma in a
multiple operand statement.
System action: A machine instruction assembles as
zero. An assembler instruction is ignored and an
additional message relative to the statement type
appears. However, if the error is in the standard value
of a keyword on a macro prototype statement, only the
operands in error and the following operands are
ignored.
Programmer response: Make sure that all parentheses
are paired.
Severity: 12
ASMA130S Illegal attribute reference - xxxxxxxx
Explanation: One of the following errors has occurred:
v The symbol following an I, L, S, or T attribute
reference is not a valid variable symbol or ordinary
symbol or literal that has been previously used in a
machine instruction
v The symbol following a K or N attribute reference is
not a valid variable symbol
v The symbol following a D or O attribute reference is
not a valid variable symbol or ordinary symbol
v The apostrophe is missing from a T attribute
reference
System action: The statement is ignored.
Programmer response: Supply a valid attribute
reference.
Severity: 12
ASMA131S Parenthesis nesting depth exceeds 255 -
xxxxxxxx
Explanation: There are more than 255 levels of
parentheses in a SETA expression.
System action: The statement is ignored.
Programmer response: Rewrite the SETA statement
using several statements to regroup the subexpressions
in the expression.
Severity: 12
ASMA132S Invalid logical expression - xxxxxxxx
Explanation: A logical expression in the operand field
of a SETB statement or an AIF statement does not
consist of valid character relational expressions,
arithmetic relational expressions, and single SETB
symbols, connected by logical operators.
System action: The statement is ignored.
Programmer response: Supply a valid logical
expression.
Severity: 12
ASMA133S Illegal substring reference - xxxxxxxx
Explanation: A substring expression following a SETC
expression does not consist of two valid SETA
expressions separated by a comma and enclosed in
parentheses.
System action: The statement is ignored.
Programmer response: Supply a valid substring
expression. The second value in the substring
expression can be *.
Severity: 12
ASMA134S Invalid relational operator - xxxxxxxx
Explanation: Characters other than EQ, NE, LT, GT,
LE, or GE are used in a SETB expression where a
relational operator is expected.
System action: The statement is ignored.
Programmer response: Supply a valid relational
operator.
Severity: 12
ASMA135S Invalid logical operator - xxxxxxxx
Explanation: Characters other than AND, OR, NOT, or
XOR are used in a SETB expression where a logical
operator is expected.
System action: The statement is ignored.
Programmer response: Supply a valid logical operator.
Severity: 12
ASMA128S • ASMA135S
Appendix F. High Level Assembler messages 319
ASMA136S Illegal logical/relational operator
Explanation: Characters other than a valid logical or
relational operator were found where a logical or
relational operator was expected.
System action: The statement is ignored.
Programmer response: Supply a valid logical or
relational operator.
Severity: 12
ASMA137S Invalid character expression - xxxxxxxx
Explanation: The operand of a SETC statement or the
character value used in a character relation is
erroneous. It must be a valid type attribute (T')
reference, a valid operation code attribute (O') or a
valid character expression enclosed in apostrophes.
System action: The statement is ignored.
Programmer response: Supply a valid character
expression.
Severity: 12
ASMA138W Non-empty PUSH xxxxxxx stack
Explanation: The number of PUSH instructions
exceeds the number of POP instructions at the end of
the assembly. This indicates a potential error.
System action: The assembly continues.
Programmer response: Change your program to issue
POP instructions for all PUSHes. You can suppress this
warning by specifying the NOPUSH suboption of the
FLAG option.
Severity: 4
ASMA139S EOD during REPRO processing
Explanation: A REPRO statement was immediately
followed by an end-of-data so that no valid record
could be punched. The REPRO is either the last record
of source input or the last record of a COPY member.
System action: The REPRO statement is ignored.
Programmer response: Remove the REPRO or ensure
that it is followed by a record to be punched.
Severity: 12
ASMA140W END record missing
Explanation: End-of-file on the source input data set
occurred before an END statement was read. One of
the following situations has occurred:
v The END statement was omitted or misspelled.
v The END operation code was changed or deleted by
OPSYN or by definition of a macro named END. The
lookahead phase of the assembler marks what it
thinks is the END statement. If an OPSYN statement
or a macro definition redefines the END statement,
premature end-of-input might occur because the
assembler does not pass the original END statement.
System action: An END statement is generated. It is
assigned a statement number but not printed. If any
literals are waiting, they are processed as usual
following the END statement.
Programmer response: Check for lost records. Supply
a valid END statement; or, if you use OPSYN to define
another symbol as END, place it before the possible
entry into the lookahead phase.
Severity: 4
ASMA141E Bad character in operation code -
xxxxxxxx
Explanation: The operation code contains a
non-alphanumeric character, that is, a character other
than A to Z, 0 to 9, $, #, @, or _. Embedded spaces are
not allowed.
System action: The statement is ignored.
Programmer response: Supply a valid operation code.
If the operation code is formed by variable symbol
substitution, check the statements leading to
substitution.
Severity: 8
ASMA142E Operation code not complete on first
record
Explanation: The whole name and operation code,
including a trailing space, is not contained on the first
record (before the continue column—normally column
72) of a continued statement.
System action: The statement is ignored.
Programmer response: Shorten the name, operation
code, or both, or simplify the statement by using a
separate SETC statement to create the name or
operation code by substitution.
Severity: 8
ASMA143E Bad character in name field - xxxxxxxx
Explanation: The name field contains a
non-alphanumeric character, that is, a character other
than A to Z, 0 to 9, $, #, @, or _.
System action: If possible, the statement is processed
without a name. Otherwise, it is ignored.
Programmer response: Put a valid symbol in the
name field.
Severity: 8
ASMA136S • ASMA143E
320 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA144E Begin-to-continue columns not blank -
xxxxxxxx
Explanation: On a continuation record, one or more
columns between the begin column (normally column
1) and the continue column (normally column 16) are
not blank.
System action: The extraneous characters are ignored.
Programmer response: Check whether the operand
started in the wrong column or whether the preceding
record contained an erroneous continuation character.
Severity: 8
ASMA145E Operator, right parenthesis, or
end-of-expression expected - xxxxxxxx
Explanation: One of the following situations has
occurred:
v A letter, number, equal sign, apostrophe, or
undefined character occurred following a term where
a right parenthesis, an operator, a comma, or a space
ending the expression was expected
v In an assembler instruction, a left parenthesis
followed a term
System action: A machine instruction assembles as
zero. An assembler instruction is ignored and another
message, relative to the operation code, is issued.
Programmer response: Check for an omitted or
misplaced operator. Subscripting is not allowed on this
statement.
Severity: 8
ASMA146E Self-defining term too long or value too
large - xxxxxxxx
Explanation: A self-defining term is longer than 4
bytes (8 hexadecimal digits, 32 bits, or 4 characters), or
the value of a decimal self-defining term is greater than
231-1.
System action: A machine instruction assembles as
zero. An assembler instruction is ignored. However,
another message, relative to the operation code, is
issued.
Programmer response: Reduce the size of the
self-defining term, or specify it in a DC statement.
Severity: 8
ASMA147E Symbol too long, or first character not a
letter - xxxxxxxx
Explanation: A symbol is longer than 63 characters, or
does not begin with a letter, $, #, @, or underscore (_).
System action: If the symbol is in the name field, the
statement is processed as unnamed. If the symbol is in
the operand field, an assembler operation or a macro
definition model statement is ignored and a machine
operation assembles as zero.
Programmer response: Supply a valid symbol.
Severity: 8
ASMA148E Self-defining term lacks ending quote or
has bad character - xxxxxxxx
Explanation: A hexadecimal or binary self-defining
term contains a character that is not permitted or is
missing the final apostrophe, or a pure DBCS
self-defining term contains SO and SI with no
double-byte data between them.
System action: A machine operation assembles as
zero. An assembler operation is ignored and another
message, relative to the operation code, is issued.
Programmer response: Correct the incorrect term.
Severity: 8
ASMA149E Literal length exceeds 256 characters,
including = sign - xxxxxxxx
Explanation: A literal is longer than 256 characters.
System action: The instruction assembles as zero.
Programmer response: Shorten the literal, or change it
to a DC statement.
Severity: 8
ASMA150E Symbol has non-alphanumeric character
or invalid delimiter - xxxxxxxx
Explanation: The first character following a symbol is
not a valid delimiter (plus sign, minus sign, asterisk,
slash, left or right parenthesis, comma, or space).
System action: A machine operation assembles as
zero. An assembler operation is ignored, and another
message, relative to this operation code, is issued.
Programmer response: Ensure that the symbol does
not contain a non-alphanumeric character and that it is
followed by a valid delimiter.
Severity: 8
ASMA151E Literal expression modifiers must be
absolute and predefined - xxxxxxxx
Explanation: The duplication factor or length modifier
in a literal is not a self- defining term, or an expression
using self-defining terms or previously defined
symbols.
System action: The statement assembles as zero.
Programmer response: Supply a valid self-defining
term or ensure that symbols appear in the name field
of a previous statement.
ASMA144E • ASMA151E
Appendix F. High Level Assembler messages 321
Severity: 8
ASMA152S External symbol too long or
unacceptable character - xxxxxxxx
Explanation: One of the following errors has occurred:
v An external symbol is longer than eight characters,
or the limit is 63 characters when the
GOFF/XOBJECT option is in effect, or contains a bad
character. An external symbol might be the name of
a CSECT, RSECT, START, DXD, AMODE, RMODE,
or COM statement, or the operand of an ENTRY,
EXTRN, or WXTRN statement or a Q-type or V-type
address constant.
v The operand of an ENTRY, EXTRN, or WXTRN
statement or a Q-type or V-type address constant is
an expression instead of a single term, or contains a
bad character.
v A class name in a CATTR statement is longer than 16
characters, or contains a bad character.
System action: The symbol does not appear in the
external symbol dictionary. If the error is in the name
field, an attempt is made to process the statement as
unnamed. If the error is in the operand field, the bad
operand is ignored and, if possible, the following
operands are processed. A bad constant assembles as
zero.
Programmer response: Supply a shorter name or
replace the expression with a symbol.
Severity: 12
ASMA153S START statement illegal - CSECT
already begun
Explanation: A START statement occurred after the
beginning of a control section.
System action: The statement is processed as a CSECT
statement; any operand is ignored.
Programmer response: Ensure that the START
precedes all machine instructions and any assembler
instruction, such as EQU, that initiates a control section.
If you want EQU statements before the START, place
them in a dummy section (DSECT).
Severity: 12
ASMA154E Operand must be absolute, predefined
symbols; set to zero - xxxxxxxx
Explanation: The operand on a SETA, SETB, SETC,
START, or MHELP statement is not correct. If there is
another message with this statement, this message is
advisory. If this message appears alone, it indicates one
of the following:
v There is a location counter reference (*) in a START
operand.
v An expression does not consist of absolute terms,
predefined symbols, or both.
v The statement is too complex. For example, it might
have too many forward references or cause
arithmetic overflow during evaluation.
v The statement is circularly defined.
v A relocatable term is multiplied or divided.
System action: The operand of the statement is treated
as zero.
Programmer response: Correct the error if it exists.
Paired relocatable symbols in different LOCTRs, even
though in the same CSECT, DSECT, or RSECT, are not
valid where an absolute, predefined value is required.
Severity: 8
ASMA155S Previous use of symbol is not this
section type
Explanation: The name on a CSECT, DSECT, RSECT,
COM, CATTR, or LOCTR statement has been used
previously, on a different type of statement. For
example, the name on a CSECT has been used before
on a statement other than CSECT, such as a machine
instruction or a LOCTR.
System action: This name is ignored, and the
statement processes as unnamed.
Programmer response: Correct the misspelled name,
or change the name to one that does not conflict.
Severity: 12
ASMA156S Only ordinary symbols, separated by
commas, allowed
Explanation: The operand field of an ENTRY, EXTRN,
or WXTRN statement contains a symbol that does not
consist of 1-to-8 alphanumeric characters, the first being
alphabetic, or the operands are not separated by a
comma.
System action: The operand in error is ignored. If
other operands follow, they process normally.
Programmer response: Supply a correct symbol or
insert the missing comma. If you want an expression as
an ENTRY statement operand (such as SYMBOL+4),
use an EQU statement to define an additional symbol.
Severity: 12
ASMA157S Operand must be a simply relocatable
expression
Explanation: If there is another message with this
statement, this message is advisory. If this message
appears alone, the operand of an ORG or END
statement is not a simple relocatable expression, is too
complex, or is circularly defined. The error might also
be that the END operand symbol is not in a CSECT, or
is not an external symbol without addend.
System action: An ORG statement or the operand of
ASMA152S • ASMA157S
322 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
an END statement is ignored.
Programmer response: If an error exists, supply a
correct expression. Paired relocatable symbols in
different LOCTRs, even though in the same CSECT or
DSECT, might cause circular definition when used in
an ORG statement.
Severity: 12
ASMA158E Operand expression is defective; set to *
Explanation: The first operand of an EQU statement is
defective. If another message appears with this
statement, this message is advisory. If this message
appears alone, one of the following errors has occurred:
v The statement is too complex. For example, it has too
many forward references or causes an arithmetic
overflow during evaluation.
v The statement is circularly defined.
v The statement contains a relocatable term that is
multiplied or divided.
System action: The symbol in the name field is
equated to the current value of the location counter (*),
and operands 2 and 3 of the statement, if present, are
ignored.
Programmer response: If an error exists, supply a
correct expression for operand 1 of the statement.
Severity: 8
ASMA159S Operand must be absolute, proper
multiples of 2 or 4
Explanation: The combination of operands of a CNOP
statement is not one of the following valid
combinations:
0,4 2,4
0,8 2,8
4,8 6,8
0,16 2,16
4,16 6,16
8,16 10,16
12,16 14,16
System action: The statement is ignored. However, the
location counter is adjusted to a halfword boundary.
Programmer response: Supply a valid combination of
CNOP operands.
Severity: 12
ASMA160W Invalid BYTE function operand xxxxxxxx
Explanation: The value xxxxxxxx of the operand of the
BYTE built-in function is outside the expected range of
0–255.
System action: The low-order eight bits of the
operand's value are used.
Programmer response: Supply an arithmetic
expression which returns an acceptable value.
Severity: 4
ASMA161W Only one TITLE statement may have a
name field
Explanation: More than one TITLE statement has a
name field. The named TITLE statement need not be
the first one in the assembly, but it must be the only
one named.
System action: The name on this TITLE statement is
ignored. The name used for deck identification is taken
from the first named TITLE statement encountered.
Programmer response: Delete the unwanted name.
Severity: 4
ASMA162S PUNCH operand exceeds 80 columns;
ignored
Explanation: A PUNCH statement attempted to punch
more than 80 characters into a record.
System action: The statement is ignored. The record is
not punched.
Programmer response: Shorten the operand to 80
characters or fewer or use more than one PUNCH
statement.
Severity: 12
ASMA163W Operand not properly enclosed in
quotes
Explanation: The operand of a PUNCH or TITLE
statement does not begin with an apostrophe, or the
operand of a PUNCH, MNOTE, or TITLE statement
does not end with an apostrophe, or the ending
quotation mark is not followed by a space.
System action: The statement is ignored.
Programmer response: Supply the missing
apostrophe. Be sure that an apostrophes to be punched
or printed as data is represented as two apostrophes.
Severity: 4
ASMA164W Operand is a null string - record not
punched
Explanation: A PUNCH statement does not have any
characters between its two apostrophes, or a single
apostrophe to be punched as data is not represented by
two apostrophes.
System action: The statement is ignored.
Programmer response: Correct the operand. If you
want to “punch” a blank record, the operand of the
PUNCH statement should be a space enclosed in
apostrophes.
Severity: 4
ASMA158E • ASMA164W
Appendix F. High Level Assembler messages 323
ASMA165W Unexpected name field
Explanation: The name field on this statement is not
blank and is not a sequence symbol. The name field
cannot be an ordinary symbol.
For example, this message is generated by the
statement
X ANOP
System action: The name is equated to the current
value of the location counter (*). However, if no control
section has been started, the name is equated to zero.
Programmer response: Remove the name field, or
ensure that the name is preceded with a period if you
want it to be a sequence symbol.
Severity: 4
ASMA166S Sequence symbol too long - xxxxxxxx
Explanation: A sequence symbol contains more than
62 characters following the period.
System action: If the sequence symbol is in the name
field, the statement is processed without a name. If it is
in the operand field of an AIF or AGO statement, the
whole statement is ignored.
Programmer response: Shorten the sequence symbol.
Severity: 12
ASMA167E Required name missing
Explanation: This statement requires a name and has
none. The name field might be blank because an error
occurred during an attempt to create the name by
substitution or because a sequence symbol was used as
the name.
For example, this message is generated by the
statement
EQU 3 Empty name field
System action: The statement is ignored.
Programmer response: Supply a valid name or ensure
that a valid name is created by substitution. If a
sequence symbol is needed, put it on an ANOP
statement ahead of this one and put a name on this
statement. If this message is generated for a LOCTR,
when attempting to continue a location counter for an
unnamed section, then first supply an appropriately
named LOCTR in the unnamed section so that
subsequent LOCTRs can continue by specifying the
name.
Severity: 8
ASMA168C Undefined sequence symbol - xxxxxxxx
Explanation: The sequence symbol in the operand
field of an AIF or AGO statement outside a macro
definition is not defined; that is, it does not appear in
the name field of an associated statement.
System action: This statement is ignored; assembly
continues with the next statement.
Programmer response: If the sequence symbol is
misspelled or omitted, correct it. When the sequence
symbol is not previously defined, the assembler looks
ahead for the definitions. The lookahead stops when an
END statement or an OPSYN equivalent is
encountered. Be sure that OPSYN statements and
macro definitions that redefine END precede possible
entry into look-ahead.
Severity: 16
ASMA169I Implicit length of symbol symbol used
for operand n
Explanation: A length subfield was omitted from
operand n in an SS-format machine instruction and the
implicit length of symbol is assembled into the object
code of the instruction.
System action: The instruction is assembled using an
implicit length which:
v For an implicit address, is the length attribute of the
first or only term in the expression representing the
implicit address
v For an explicit address, is the length attribute of the
first or only term in the expression representing the
displacement
Programmer response: Check the instruction to ensure
that the operation and operands are coded correctly.
You can suppress this warning by specifying the
NOIMPLEN suboption of the FLAG option.
Severity: 0
ASMA170S Interlude error-logging capacity
exceeded
Explanation: The table that the interlude phase of the
assembler uses to keep track of the errors it detects is
full. This does not stop error detection by other phases
of the assembler.
System action: If there are additional errors, normally
detected by the interlude phase, in other statements
either before or after this one, they are not flagged.
Statement processing depends on the type of error.
Programmer response: Correct the indicated errors,
and run the assembly again to diagnose any further
errors.
Severity: 12
ASMA165W • ASMA170S
324 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA171S Standard value too long
Explanation: The standard (default) value of a
keyword parameter on a macro prototype statement is
longer than 1024 characters.
System action: The parameter in error and the
following parameters are ignored.
Programmer response: Shorten the standard value.
Severity: 12
ASMA172E Negative duplication factor; default=1 -
xxxxxxxx
Explanation: The duplication factor of a SETC
statement is negative.
System action: The duplication factor is given a
default value of 1.
Programmer response: Supply a non-negative
duplication factor.
Severity: 8
ASMA173S Delimiter error, expected blank -
xxxxxxxx
Explanation: The character string xxxxxxxx is found
where a blank (end of operand) is required.
System action: A machine instruction assembles as
zero. An ORG statement is ignored. For an EQU or
END statement, the string is ignored and the operand
processes normally. For a CNOP statement, the location
counter is aligned to a halfword boundary.
Programmer response: Insert a comma, or replace the
string with a space. Look for an extra operand or a
missing left parenthesis.
Severity: 12
ASMA174S Delimiter error, expected blank or
comma - xxxxxxxx
Explanation: The character string xxxxxxxx is found
where a blank or a comma is required.
System action: A machine instruction assembles as
zero. For a USING or DROP statement, the incorrect
delimiter is ignored and the operand is processed
normally.
Programmer response: Insert a comma, or replace the
string with a space. Look for an extra operand or a
missing left parenthesis.
Severity: 12
ASMA175S Delimiter error, expected comma -
xxxxxxxx
Explanation: The character string xxxxxxxx is used
where a comma is required.
System action: A machine instruction assembles as
zero. For a CNOP statement, the location counter is
aligned to a halfword boundary.
Programmer response: Insert a comma, or replace the
string with a space. Be sure that each expression is
syntactically correct and that no parentheses are
omitted.
Severity: 12
ASMA176E Operand 4 must be absolute, 1-4 bytes;
ignored
Explanation: If there is another message with this
statement, this message is advisory. If this message
appears alone, the fourth operand of an EQU statement
contains one of the following errors:
v It is not an absolute term or expression whose value
is from 1 to 4 bytes in size
v It contains a symbol that is not previously defined
v It is circularly defined
v It is too complex. For example, it causes an
arithmetic overflow during evaluation.
System action: The fourth operand is ignored, and the
program type of the EQU statement is set to binary
zeros.
Programmer response: Correct the error if it exists.
Paired relocatable symbols in different LOCTRs, even
though in the same CSECT, are not valid where an
absolute, predefined value is required.
Severity: 8
ASMA178S Delimiter error, expected comma or right
parenthesis - xxxxxxxx
Explanation: The character string xxxxxxxx is used in
a machine instruction when a comma or a right
parenthesis is required.
System action: The machine instruction assembles as
zero.
Programmer response: Insert a comma, or replace the
string with a right parenthesis. Look for a missing base
field.
Severity: 12
ASMA179S Delimiter error, expected right
parenthesis - xxxxxxxx
Explanation: The character string xxxxxxxx is used in
a machine instruction when a right parenthesis is
required.
ASMA171S • ASMA179S
Appendix F. High Level Assembler messages 325
System action: The machine instruction assembles as
zero.
Programmer response: Replace the string with a right
parenthesis. Look for an index field used where it is
not allowed.
Severity: 12
ASMA180S Operand must be absolute
Explanation: The operand of a SPACE or CEJECT
statement or the first, third, or fourth operand of a
CCW statement is not an absolute term.
System action: A SPACE or CEJECT statement is
ignored. A CCW statement assembles as zero.
Programmer response: Supply an absolute operand.
Paired relocatable terms can span LOCTRs but must be
in the same control section.
Severity: 12
ASMA181S CCW operand value is outside
allowable range
Explanation: One or more operands of a CCW
statement are not within the following limits:
v First operand—0 to 255
v Second operand—0 to 16 777 215 (CCW, CCW0); or 0
to 2 147 483 647 (CCW1)
v Third operand—0-255 and a multiple of 8
v Fourth operand—0-65 535
System action: The CCW assembles as zero.
Programmer response: Supply valid operands.
Severity: 12
ASMA182E Operand 2 must be absolute, 0-65535;
ignored
Explanation: If there is another message with this
statement, this message is advisory. If this message
appears alone, the second operand of an EQU
statement contains one of the following errors:
v It is not an absolute term or expression whose value
is within the range of 0 to 65,535
v It contains a symbol that is not previously defined
v It is circularly defined
v It is too complex; for example, it causes an arithmetic
overflow during evaluation
v It is derived from an absolute value
v It contains an expression that cannot be fully
evaluated
System action: Operand 2 is ignored, and the length
attribute of the first operand is used. If the third
operand is present, it processes normally.
Programmer response: Correct the error if it exists.
Paired relocatable symbols in different LOCTRs, even
though in the same CSECT, are not valid where an
absolute, predefined value is required.
Severity: 8
ASMA183E Operand 3 must be absolute, 0-255;
ignored
Explanation: If there is another message with this
statement, this message is advisory. If this message
appears alone, the third operand of an EQU statement
contains one of the following errors:
v It is not an absolute term or expression whose value
is within the range of 0 to 255
v It contains a symbol that is not previously defined
v It is circularly defined
v It is too complex; for example, it causes an arithmetic
overflow during evaluation.
System action: The third operand is ignored, and the
type attribute of the EQU statement is set to U.
Programmer response: Correct the error if it exists.
Paired relocatable symbols in different LOCTRs, even
though in the same CSECT, are not valid where an
absolute, predefined value is required.
Severity: 8
ASMA184C COPY disaster
Explanation: The assembler copied a library member
(processed a COPY statement) while looking ahead for
attribute references. However, when the complete text
was analyzed, the COPY operation code had been
changed by an OPSYN statement or read by an
AREAD statement, and the COPY should not have
been processed. (Lookahead phase ignores OPSYN
statements.) This message follows the first record of the
COPY code.
System action: The library member assembles. If it
included an ICTL statement, the format of that ICTL is
used.
Programmer response: Move COPY statements, or
OPSYN statements that modify the meaning of COPY,
to a point in the assembly before the entry into
lookahead mode (that is, before ASMA006I Lookahead
invoked).
Severity: 16
ASMA185W Operand 2 is erroneous - xxxxxxxx
Explanation: The second operand is incorrect, or two
operands appear where there should be only one.
System action: The second operand is ignored.
Programmer response: Remove or correct the second
operand.
Severity: 4
ASMA180S • ASMA185W
326 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA186E AMODE/RMODE already set for this
ESD item
Explanation: A previous AMODE instruction has the
same name field as this AMODE instruction, or a
previous RMODE instruction has the same name field
as this RMODE instruction.
System action: The instruction in error is ignored.
Programmer response: Remove the conflicting
instruction or specify the name of another control
section.
Severity: 8
ASMA187E The name field is invalid - xxxxxxxx
Explanation: The name field of an AMODE, RMODE,
or XATTR instruction is invalid. The name field must
be one of the following:
v A valid control section name
v An ENTRY name (for AMODE or XATTR with the
GOFF option set)
v A valid external name (XATTR only)
If the XATTR statement uses the PSECT operand then
the name field must specify either a valid control
section name or ENTRY name.
System action: The instruction in error is ignored, and
the name does not appear in the cross-reference listing.
Programmer response: Specify a valid name and
resubmit the assembly.
Severity: 8
ASMA188E Incompatible AMODE and RMODE
attributes
Explanation: A previous AMODE 24 instruction has
the same name field as this RMODE ANY instruction,
or a previous RMODE ANY instruction has the same
name field as this AMODE 24 instruction.
System action: The instruction in error is ignored.
Programmer response: Change the AMODE and
RMODE attributes so they are no longer incompatible.
All combinations except AMODE 24 and RMODE ANY
are valid.
Severity: 8
ASMA189E OPSYN not permitted for REPRO
Explanation: REPRO is specified in either the name
field or the operand field of an OPSYN instruction, but
a REPRO statement has been previously encountered in
the source module. Once a REPRO statement has been
encountered, the REPRO symbolic operation code
cannot be redefined using the OPSYN instruction.
System action: The OPSYN instruction is ignored.
Programmer response: Remove the OPSYN
instruction, or remove the previously encountered
REPRO statement.
Severity: 8
ASMA190E CATTR instruction invalid because no
executable section started
Explanation: A CATTR instruction must be preceded
by a CSECT, START, or RSECT instruction.
System action: The CATTR instruction is ignored.
Programmer response: Remove the CATTR
instruction, or precede it with a CSECT, START, or
RSECT instruction.
Severity: 8
ASMA191W CATTR instruction operands ignored
Explanation: You specified operands on a CATTR
instruction which has the same class name as a
previous CATTR instruction.
System action: The assembler ignores the operands,
and continues as if you did not specify any operands.
Programmer response: You can correct this error by:
v Removing the operands from the CATTR instruction
in error
v Changing the class name for the CATTR instruction
in error
v Removing the CATTR instruction in error
Severity: 4
ASMA192W Lost precision - underflow to zero
Explanation: The value supplied is non-zero and is
too small to be represented.
System action: The constant assembles with an
exponent and fraction of zero.
Programmer response: Supply a larger value or a
longer constant type.
Severity: 4
ASMA193W Lost precision - underflow to denormal
Explanation: The value supplied is non-zero and is
too small to be represented in normalized form, but can
be represented in denormalized form.
System action: The constant assembles with the
denormalized form.
Programmer response: Supply a larger value or a
longer constant type,
Severity: 4
ASMA186E • ASMA193W
Appendix F. High Level Assembler messages 327
ASMA194W Nominal value too large - overflow to
MAX
Explanation: The value supplied is too large to be
represented and the rounding mode of the constant
indicates rounding towards zero. The value is
represented as the signed maximum representable
value.
System action: The constant assembles with the
signed maximum value.
Programmer response: Supply a smaller value or a
longer constant type.
Severity: 4
ASMA195W Nominal value too large - overflow to
INF
Explanation: The value supplied is too large to be
represented and the rounding mode of the constant
indicates rounding away from zero. The value is
represented as a signed infinity.
System action: The constant assembles with the
signed special value INF.
Programmer response: Supply a smaller value or a
longer constant type.
Severity: 4
ASMA196W Scaling modifier ignored for binary
floating-point constant
Explanation: A scaling modifier has been included in
the definition of a binary floating-point constant.
System action: The scaling modifier has been ignored.
Programmer response: Remove the scale modifier.
Severity: 4
ASMA198E Exponent modifier is not permitted for
special value
Explanation: The exponent modifier is not permitted
for a floating-point special value.
System action: The constant assembles as zeros.
Programmer response: Remove the exponent modifier.
Severity: 8
ASMA199E Rounding indicator invalid
Explanation: The rounding indicator for the
floating-point constant is not a valid value.
System action: The operand in error and the following
operands are ignored.
Programmer response: Correct the rounding indicator.
Severity: 8
ASMA201W SO or SI in continuation column - no
continuation assumed
Explanation: When High Level Assembler is invoked
with the DBCS option, the double-byte delimiters SO
and SI are treated as spaces in the continuation
indicator field, and not as continuation indicators.
System action: The SO or SI in the continuation
indicator field assembles as a space, and the next line is
not treated as a continuation line.
Programmer response: If continuation is required,
then rearrange the source line so that a non-space
EBCDIC character can be used to indicate continuation.
If continuation is not required, check that everything
preceding the SO or SI is complete and valid data.
Severity: 4
ASMA202W Shift-in not found at extended
continuation; check data truncation -
xxxxxxxx
Explanation: The assembler has detected an extended
continuation indicator that is not on a source statement
containing double-byte data. The extended continuation
indicator feature is provided to permit continuation of
double-byte data, and single-byte data next to
double-byte data. If you use extended continuation
indicators anywhere else, the assembler issues this
message. As this situation can be caused by a coding
error, the assembler might unintentionally treat the data
as extended continuation indicators.
System action: The extended continuation indicators
do not assemble as part of the operand.
Programmer response: Change the continuation
indicator if unintentional truncation occurred.
Severity: 4
ASMA203E Unbalanced double-byte delimiters -
xxxxxxxx
Explanation: A mismatched SO or SI has been found.
This could be the result of truncated or nested
double-byte data. This error does NOT occur because
valid double-byte data is truncated to fit within the
explicit length specified for C-type DC, DS, and DXD
statements and literals - that condition produces error
ASMA208E.
System action: The operand in error, and the
following operands are ignored.
Programmer response: Correct the incorrect
double-byte data.
Severity: 8
ASMA194W • ASMA203E
328 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA204E Invalid double-byte data - xxxxxxxx
Explanation: All data between SO and SI must be
valid double-byte characters. A valid double-byte
character is defined as either double-byte space
(X'4040'), or two bytes each of which must be in the
range X'41' to X'FE' inclusive.
This error does not apply to the operands of macro
instructions.
System action: The operand in error, and the
following operands are ignored.
Programmer response: Correct the incorrect
double-byte data.
Severity: 8
ASMA205E Extended continuation end column must
not extend into continue column
Explanation: The extended continuation indicator
extended into the continue column.
System action: The extended continuation indicator is
ignored. The following record or records might be
treated as incorrect. The extended continuation
indicators are treated as part of the source statement.
Programmer response: If the data in the extended
continuation is to be regarded as valid input then
another non-space character must be used in the
continuation indication column to identify the data as
valid and to continue to the next record. If the data is
not to be part of the constant then remove the
characters of the extended continuation and add the
correct data to the continue record to the point where
the extended continuation is needed. This message
might be encountered when converting code that
assembled with the NODBCS option to code that is to
be assembled with the DBCS option.
Severity: 8
ASMA206E G-type constant must not contain
single-byte data - xxxxxxxx
Explanation: A G-type constant or self-defining term,
after substitution has occurred, must consist entirely of
double-byte data, correctly delimited by SO and SI. If
SO or SI are found in any byte position other than the
first and last (excepting redundant SI/SO pairs which
are removed) then this error is reported.
System action: The operand in error, and the
following operands are ignored.
Programmer response: Either remove the single-byte
data from the operand, or change the constant to a
C-type.
Severity: 8
ASMA207E Length of G-type constant must be a
multiple of 2 - xxxxxxxx
Explanation: A G-type constant must contain only
double-byte data. If assembled with a length modifier
which is not a multiple of 2, incorrect double-byte data
is created.
System action: The operand in error, and the
following operands are ignored.
Programmer response: Either correct the length
modifier, or change the constant to a C-type.
Severity: 8
ASMA208E Truncation into double-byte data is not
permitted - xxxxxxxx
Explanation: The explicit length of a C-type constant
in a DS, DC, or DXD statement or literal must not
cause the nominal value to be truncated at any point
within double-byte data.
System action: The operand in error, and the
following operands are ignored.
Programmer response: Either correct the length
modifier, or change the double-byte data so that it is
not truncated.
Severity: 8
ASMA209E Symbol not name of class, DXD, or
DSECT
Explanation: The operand of a J-type address constant
is not the name of a class, DXD, or DSECT.
System action: The constant assembles as zero.
Programmer response: Supply a valid operand.
Severity: 8
ASMA210E Illegal register usage
Explanation: The register operands for the machine
instruction must be unique.
System action: The machine instruction assembles as
zero.
Programmer response: Correct the instruction such
that the operands specified are unique.
Severity: 8
ASMA211E Unicode conversion table not available.
Explanation: The address of the UNICODE conversion
table is zero in the Code Page module specified in the
CODEPAGE option.
System action: The constant is not converted.
Programmer response: Ensure that the code page
ASMA204E • ASMA211E
Appendix F. High Level Assembler messages 329
module is generated according to the instructions
described in Appendix L, “How to generate a Unicode
translation table,” on page 367.
Severity: 12
ASMA212W Branch address alignment for xxxxxxxx
unfavorable
Explanation: A branch address referenced by this
statement might not be aligned to the required
boundary for this instruction; for example, the target
referenced by a Branch and Save (BAS) instruction
might not be aligned on a halfword boundary.
System action: The instruction assembles as written.
Programmer response: Correct the operand if it is in
error. To suppress this message, use the
FLAG(NOALIGN) assembler option.
Severity: 4
ASMA213W Storage alignment for xxxxxxxx
unfavorable
Explanation: An address referenced by this statement
might not be aligned to the required boundary for this
instruction; for example, the data referenced by a
Compare and Swap (CS) instruction might not be
aligned on a fullword boundary.
System action: The instruction assembles as written.
Programmer response: Correct the operand if it is in
error. To suppress this message, use the
FLAG(NOALIGN) assembler option, or specify a
previous ACONTROL FLAG(NOALIGN) instruction.
Severity: 4
ASMA214E Invalid operand value - &var
Explanation: The contents of operand &var is invalid
for one of the following reasons:
v null value
v a hexadecimal value is required in the operand of a
hexadecimal conversion function
v a binary value is required in the operand of a binary
conversion function
v the operand is longer than the function supports
v A decimal value is required in the operand of a
decimal conversion function
v The operand is outside the range of acceptable
values that the function supports
System action: The statement is ignored.
Programmer response: Supply a valid operand value.
Severity: 8
ASMA215W Relative Immediate external relocation
in NOGOFF object text - xxxxxxxx
Explanation: The external address xxxxxxxx is used in
a relative immediate branch instruction and the
assembly is using the old object text format.
System action: A special RLD entry is created.
Programmer response: Check that the linkage
editor/binder is able to process the RLD entry. On
z/VM and z/VSE systems, check that the system
loader and linker can support relative-external
relocation types before using them.
Severity: 4
ASMA216W Quadword alignment in NOGOFF
object text
Explanation: The SECTALGN option has been used to
request that sections are aligned on quad word
boundaries with the NOGOFF option.
System action: None - the ESD entries are created as
requested.
Programmer response: Check that the linkage
editor/binder is able to process the updated ESD
entries.
Severity: 4
ASMA217W DFP lower clamped to zero - xxxxxxxx
Explanation: The Decimal Floating Point conversion
routine has had to modify (or clamp) the exponent in
order to fit within the format. No significant digits
have been lost.
System action: The constant assembles with the
correct value using the clamped exponent.
Programmer response: Modify the exponent value to
remove the need for clamping.
Severity: 4
ASMA218W DFP upper clamped to zero - xxxxxxxx
Explanation: The Decimal Floating Point conversion
routine has had to modify (or clamp) the exponent in
order to fit within the format. No significant digits
have been lost.
System action: The constant assembles with the
correct value using the clamped exponent.
Programmer response: Modify the exponent value to
remove the need for clamping.
Severity: 4
ASMA212W • ASMA218W
330 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA219W DFP lower clamped non zero - xxxxxxxx
Explanation: The Decimal Floating Point conversion
routine has had to modify (or clamp) the exponent in
order to fit within the format. No significant digits
have been lost.
System action: The constant assembles with the
correct value using the clamped exponent.
Programmer response: Modify the exponent value to
remove the need for clamping.
Severity: 4
ASMA220W DFP upper clamped non zero - xxxxxxxx
Explanation: The Decimal Floating Point conversion
routine has had to modify (or clamp) the exponent in
order to fit within the format. No significant digits
have been lost.
System action: The constant assembles with the
correct value using the clamped exponent.
Programmer response: Modify the exponent value to
remove the need for clamping.
Severity: 4
ASMA253C Too many errors
Explanation: No more error messages can be issued
for this statement, because the assembler work area in
which the errors are logged is full.
System action: If more errors are detected for this
statement, the messages, annotated text, or both, are
discarded.
Programmer response: Correct the indicated errors,
and rerun the assembly. If there are more errors on this
statement, they are detected in the next assembly.
Severity: 16
ASMA254I *** MNOTE ***
Explanation: The text of an MNOTE statement, which
is appended to this message, has been generated by
your program or by a macro definition or a library
member copied into your program. An MNOTE
statement enables a source program or a macro
definition to signal the assembler to generate an error
or informational message.
System action: None.
Programmer response: Investigate the reason for the
MNOTE. Errors flagged by MNOTE often cause the
program to fail if it is run.
Severity: An MNOTE is assigned a severity code of 0
to 255 by the writer of the MNOTE statement.
ASMA300W USING overridden by a prior active
USING on statement number nnnnnn
Explanation: The USING instruction specifies the
same base address as a previous USING instruction at
statement number nnnnnn, and the base register
specified is lower-numbered than the previously
specified base register.
System action: The assembler uses the
higher-numbered base register for address resolution of
symbolic addresses within the USING range.
Programmer response: Check your USING statements
to ensure that you have specified the correct base
address and base register and that you have not
omitted a needed DROP statement for the previous
base register. You can suppress this message by
reducing the value specified in the WARN suboption of
the USING option by 1.
Severity: 4
ASMA301W Prior active USING on statement
number nnnnnn overridden by this
USING
Explanation: The USING instruction specifies the
same base address as a previous USING instruction at
statement number nnnnnn, and the base register
specified is higher-numbered than the previous base
register.
System action: The assembler uses the
higher-numbered base register for address resolution of
symbolic addresses within the USING range.
Programmer response: Check your USING statements
to ensure that you have specified the correct base
address and base register and that you have not
omitted a needed DROP statement for the previous
base register. You can suppress this message by
reducing the value specified in the WARN suboption of
the USING option by 1.
Severity: 4
ASMA302W USING specifies register 0 with a
non-zero absolute or relocatable base
address
Explanation: The assembler assumes that when
register 0 is used as a base register, it contains zero.
Therefore, regardless of the value specified for the base
address, displacements are calculated from base 0.
System action: The assembler calculates displacements
as if the base address specified were absolute or
relocatable zero.
Programmer response: Check the USING statement to
ensure that you have specified the correct base address
and base register. You can suppress this message by
reducing the value specified in the WARN suboption of
the USING option by 2.
ASMA219W • ASMA302W
Appendix F. High Level Assembler messages 331
Severity: 4
ASMA303W Multiple address resolutions may result
from this USING and the USING on
statement number nnnnnn
Explanation: The USING instruction specifies a base
address that lies within the range of an earlier USING
instruction at statement number nnnnnn. The assembler
might use multiple base registers when resolving
implicit addresses within the range overlap.
System action: The assembler computes displacements
from the base address that gives the smallest
displacement, and uses the corresponding base register
when it assembles addresses within the range overlap.
Programmer response: Check your USING
instructions for unintentional USING range overlaps
and check that you have not omitted a needed DROP
statement. You can suppress this message by reducing
the value specified in the WARN suboption of the
USING option by 4.
Severity: 4
ASMA304W Displacement exceeds LIMIT value
specified
Explanation: The address referred to by this statement
has a valid displacement that is higher than the
displacement limit specified in the USING(LIMIT(xxx))
option.
System action: The instruction assembles correctly.
Programmer response: This error diagnostic message
is issued at your request. You can suppress this
message by reducing the value specified in the WARN
suboption of the USING option by 8.
Severity: 4
ASMA305E Operand 1 does not refer to location
within reference control section
Explanation: The first operand in a dependent USING
statement does not refer to a location within a reference
control section defined by a DSECT, DXD, or COM
instruction.
System action: The USING statement is ignored.
Programmer response: Change the USING statement
to specify a location within a reference control section.
Severity: 8
ASMA306W USING range overlaps implicit USING
0,0
Explanation: The USING range overlaps the
assembler's implicit USING 0,0. This implicit USING is
used to convert absolute implicit addresses in the range
0 to 4095. As a result of this USING, the assembler
might not generate the expected object code.
System action: The assembly continues
Programmer response: Correct the USING statement.
If you believe that it is correct, specify the
FLAG(NOUSING0) option or a preceding ACONTROL
FLAG(NOUSING0) instruction.
Severity: 4
ASMA307E No active USING for operand n
Explanation: The operand specified occurs in a section
without an active USING.
System action: The instruction assembles as zero.
Programmer response: Provide a USING instruction.
Severity: 8
ASMA308E Repeated register reg nullifies prior
USING range
Explanation: The repeated register nullifies the range
specified by a prior use of that register on the same
USING instruction.
System action: The statement is ignored.
Programmer response: Correct the USING instruction.
Severity: 8
ASMA309W Operand xxxxxxxx resolved to a
displacement with no base register
Explanation: The machine instruction specifies an
operand which is resolved to a baseless address when a
base and displacement are expected. This might be the
programmer's intent, but is generally an error.
System action: Base register zero is assembled into the
object code of the instruction.
Programmer response: Check the instruction to ensure
that the operation and operands are coded correctly. If
you want to reference page zero you can specify a
USING for the appropriate DSECT with a zero base
register. You can suppress this warning by specifying
the NOPAGE0 suboption of the FLAG option.
Severity: 4
ASMA310W Name already used in prior ALIAS or
XATTR - xxxxxxxx
Explanation: The name specified in the ALIAS or
XATTR statement has already been used in a previous
ALIAS or XATTR statement.
System action: The statement is ignored.
Programmer response: Change the program so that
the name is used in only one ALIAS or XATTR
statement.
ASMA303W • ASMA310W
332 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
Severity: 4
ASMA311E Illegal ALIAS string
Explanation: The ALIAS string is illegal for one of the
following reasons:
v The string is null
v The string is not in the form C"cccccccc" or
X'hhhhhhhh'
v The string is in the form X'hhhhhhhh' but an odd
number of hexadecimal digits has been specified
v The string contains a character outside the valid
range of X'42' to X'FE'
v The string has been used in the name entry on a
previous CSECT, DSECT, RSECT, COM, or LOCTR
instruction
System action: The statement is ignored.
Programmer response: Change the program so that
the string conforms to the required syntax.
Severity: 8
ASMA312E ALIAS name is not declared as an
external symbol - xxxxxxxx
Explanation: The name specified on the ALIAS
statement is not declared as an external symbol, either
explicitly using an EXTRN, CSECT, RSECT, and so on,
or implicitly using a V-type constant.
System action: The statement is ignored.
Programmer response: Change the program so that
the name is declared as an external symbol.
Severity: 8
ASMA313E The end value specified in the USING
is less than or equal to the base value
Explanation: The end value specified is less than or
equal to the base value which results in a zero or
negative range.
System action: The end value is ignored and the
default range value is used.
Programmer response: Change the USING statement
to specify an end value that is greater than the base
value.
Severity: 8
ASMA314E The base and end values have differing
relocation attributes
Explanation: The base and end values have differing
relocation attributes; that is, they are defined in
different sections.
System action: The end value is ignored and the
default range value is used.
Programmer response: Change the USING statement
to specify an end value that is in the same section as
the base value.
Severity: 8
ASMA315E XATTR instruction invalid when
NOGOFF specified
Explanation: The XATTR instruction can only be used
when the GOFF option is set.
System action: The statement is ignored.
Programmer response: Either remove the XATTR
statement and resubmit the assembly or ensure that the
GOFF option is set and resubmit the assembly.
Severity: 8
ASMA316E Invalid PSECT symbol - nnnnnnnn
Explanation: The symbol nnnnnnnn specified in the
PSECT operand is invalid for one of the following
reasons:
v The name is undefined
v The name is a class name
v The name is not one of the following:
– A valid control section name
– A valid ENTRY name
– A valid DXD name
System action: The PSECT operand is ignored.
Programmer response: Correct the PSECT operand
and resubmit the assembly.
Severity: 8
ASMA317E Invalid ATTR symbol - nnnnnnnn
Explanation: The symbol nnnnnnnn specified in the
ATTR operand is invalid for one of the following
reasons:
v The name is undefined
v The name is a DSECT name
v The name is a qualifier name
System action: The ATTR operand is ignored.
Programmer response: Correct the ATTR operand and
resubmit the assembly.
Severity: 8
ASMA318W Invalid message n specified for
SUPRWARN option. Message ignored.
Explanation: Message n, specified as a suboption of
option SUPRWARN, is not a valid High Level
Assembler message. Message ignored.
System action: The specified message n is ignored.
Programmer response: Change the value n to a valid
message, or remove it from option SUPRWARN.
ASMA311E • ASMA318W
Appendix F. High Level Assembler messages 333
Severity: 4
ASMA319W Message n specified for SUPRWARN
option, but severity is too high. Message
ignored.
Explanation: Message n specified as a suboption of
option SUPRWARN is a valid High Level Assembler
message, but the severity code of message n is higher
than allowed by option SUPRWARN.
System action: The specified message n is ignored.
Programmer response: Change the value n to a valid
message, or remove it from option SUPRWARN.
Severity: 4
ASMA320W Immediate field operand may have
incorrect sign or magnitude
Explanation: The value of a signed immediate
operand of a machine instruction is beyond the allowed
range for the instruction, where the normal allowed
range of values for a 16-bit signed immediate operand
is -32768 through to 32767, and for a 32-bit signed
immediate operand is -2147483648 through to
2147483647. Immediate operands used in an arithmetic
context are signed, with bit 0 of the immediate field
being used to hold the sign bit. This reduces by one the
number of bits available to hold the absolute value of
the operand; for example:
AHI r1,-30000 is valid, but
AHI r1,50000 is not because bits 1-15 of the immediate
field can only hold a maximum absolute value of
32767.
System action: The required number of low-order bits
of the operand's value are used.
Programmer response: Use a valid immediate
operand, or specify the immediate information in a DC
statement or a literal and change the statement to a
non-immediate type. You can suppress this message by
specifying the TYPECHECK(NOMAGNITUDE) option.
Severity: 4
ASMA321E Invalid assembler type - xxxx
Explanation: The fifth operand of an EQU statement
contains an operand that does not match the allowed
assembler type values.
System action: The fifth operand is ignored, and the
assembler type of the EQU statement is set to spaces.
Programmer response: Supply a valid assembler type.
Severity: 8
ASMA322E Program type error - xxxxxxxx
Explanation: The program type subfield on a DC or
DS assembler instruction contains one of the following
errors:
v It is not an absolute term or expression whose value
is from 1 to 4 bytes in size.
v It contains a symbol that is not previously defined
v It is circularly defined
v It is too complex; for example, it causes an arithmetic
overflow during evaluation.
System action: The program type subfield is ignored,
and the program type of the DC statement is set to
binary zeros.
Programmer response: Correct the error if it exists.
Paired relocatable symbols in different LOCTRs, even
though in the same CSECT, are not valid where an
absolute, predefined value is required.
Severity: 8
ASMA323W Symbol xxxxxxxx has incompatible type
with yyyyyyyy register field
Explanation: A symbol was used to provide an
absolute value for a register field in a machine
instruction, but the assembler type assigned to the
symbol does not match the expected register type for
the instruction.
System action: The register value is used and the
object code is generated. Execution of the code is not
affected by this message.
Programmer response: Use a symbol with the correct
assembler type. If the symbol was defined using the
EQU assembler instruction, then the assembler type is
assigned to the symbol using the fifth operand. This
message can be suppressed using the
TYPECHECK(NOREGISTER) assembler option.
Severity: 4
ASMA324I Symbol xxxxxxxx may have
incompatible type with yyyyyyyy register
field
Explanation: A symbol was used to provide an
absolute value for a register field in a machine
instruction, but the assembler type assigned to the
symbol does not appear to match the expected register
type for the instruction. Once the assembler detects the
definition of a symbol with a particular assembler type,
within the current piece of source code, it uses this
message to highlight apparent inconsistent use of that
assembler type on machine instructions.
System action: The register value is used and the
object code is generated. Execution of the code is not
affected by this message.
Programmer response: Use a symbol with the correct
assembler type. If the symbol was defined using the
ASMA319W • ASMA324I
334 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
EQU assembler instruction, then the assembler type is
assigned to the symbol using the fifth operand. This
message can be suppressed using the
TYPECHECK(NOREGISTER) assembler option.
Severity: 0
ASMA400W Error in invocation parameter - xxxxxxxx
Explanation: The parameter xxxxxxxx is not a
recognized assembler option, or is incorrectly specified.
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues, using
the installation default value for the erroneously
specified option.
Programmer response: Correct the parameter error
and resubmit the assembly.
Severity: 4
ASMA401N Fixed option cannot be overridden by
invocation parameter - xxxxxxxx
Explanation: The parameter xxxxxxxx cannot be
specified in the ASMAOPT file or as an invocation
parameter because the option it is attempting to
override was fixed when High Level Assembler was
installed.
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues, using
the installation default value for the erroneously
specified option.
Programmer response: Correct the parameter error
and resubmit the assembly.
Severity: 2
ASMA402W Invalid print line length xxxxxx returned
by LISTING exit; exit processing
bypassed
Explanation: When invoked with an OPEN request,
the LISTING exit specified a print line length that was
either outside the range 121 to 255 (z/OS and CMS),
121 to 133 (z/VSE), or was not permitted for the device
to which the listing file is assigned.
System action: The assembler bypasses the exit when
processing listing records, and writes the assembly
listing to the standard listing file. The print line length
is determined by the assembler.
Programmer response: Correct the error in the
LISTING exit.
Severity: 4
ASMA404W Invalid term line length xxxxxx returned
by TERM exit; exit processing bypassed
Explanation: When invoked with an OPEN request,
the TERM exit specified a line length that was either
zero or greater than 255 (z/OS and CMS), 125 (z/VSE),
or was not permitted for the device to which the
terminal file is assigned.
System action: The assembler bypasses the exit when
processing terminal records, and writes the terminal
records to the standard terminal file. The line length is
determined by the assembler.
Programmer response: Correct the error in the TERM
exit.
Severity: 4
ASMA409I Unable to load ASMAINFO
Explanation: The assembler attempted to load the
INFO option module ASMAINFO, but the load failed.
System action: The assembly continues without listing
the INFO requested.
Programmer response: Check that ASMAINFO is in a
library accessible by the assembler.
Severity: 0
ASMA413C Unable to open INPUT file
Explanation: The assembler encountered an error
when attempting to open the assembler input file. This
is typically caused by a job control language error.
System action: The assembly stops and no listing is
produced.
Programmer response: Check the JCL for the input
file.
Severity: 16
ASMA414C Unable to open LISTING file
Explanation: The assembler encountered an error
when attempting to open the assembler listing file. This
is typically caused by a job control language error.
System action: The assembly stops and no listing is
produced.
Programmer response: Check the JCL for the listing
file.
Severity: 16
ASMA415N Unable to open TERM file
Explanation: The assembler encountered an error
when attempting to open the assembler terminal output
file. This is typically caused by a job control language
error.
ASMA400W • ASMA415N
Appendix F. High Level Assembler messages 335
System action: The assembly continues and no
terminal file is produced.
Programmer response: Check the JCL for the terminal
output file.
Severity: 2
ASMA416C Unable to open DECK file
Explanation: The assembler encountered an error
when attempting to open the assembler deck output
file. This is typically caused by a job control language
error.
System action: The assembly stops and no listing is
produced.
Programmer response: Check the JCL for the deck
output file.
Severity: 16
ASMA417C Unable to open OBJECT file
Explanation: The assembler encountered an error
when attempting to open the assembler object output
file. This is typically caused by a job control language
error.
System action: The assembly stops and no listing is
produced.
Programmer response: Check the JCL for the object
output file.
Severity: 16
ASMA418C Unable to open ADATA file
Explanation: The assembler encountered an error
when attempting to open the associated data file. This
is typically caused by a job control language error.
System action: The assembly stops and no listing is
produced.
Programmer response: Check the JCL for the
SYSADATA ddname (z/OS and CMS), or the
SYSADAT file (z/VSE).
Severity: 16
ASMA419C Unable to open TRACE file
Explanation: The assembler encountered an error
when attempting to open the internal trace file. This is
typically caused by a job control language error.
System action: The assembly stops and no listing is
produced.
Programmer response: Check the JCL for the
SYSTRACE ddname (z/OS and CMS), or the SYSTRAC
file (z/VSE).
Severity: 16
ASMA420N Error in a *PROCESS statement
parameter - xxxxxxxx
Explanation: The parameter xxxxxxxx is not a
recognized assembler option, or is incorrectly specified.
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues, using
the installation default value or the invocation
parameter value for the erroneously specified option.
Programmer response: Correct the parameter error
and resubmit the assembly.
Severity: 2
ASMA421N Fixed option cannot be overridden by
*PROCESS statement parameter -
xxxxxxxx
Explanation: The parameter xxxxxxxx cannot be
specified in a *PROCESS statement parameter because
the option it is attempting to override was fixed when
High Level Assembler was installed.
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues, using
the installation default value for the erroneously
specified option.
Programmer response: Remove the option from the
*PROCESS statement and resubmit the assembly.
Severity: 2
ASMA422N Option xxxxxxxx is not valid in a
*PROCESS statement
Explanation: The following options cannot be
specified in a *PROCESS statement:
ADATA|NOADATA OBJECT|NOOBJECT
ASA|NOASA SIZE
DECK|NODECK SYSPARM
EXIT|NOEXIT TERM|NOTERM
GOFF|NOGOFF TRANSLATE|NOTRANSLATE
LANGUAGE XOBJECT|NOXOBJECT
LINECOUNT
LIST|NOLIST
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues, using
the installation default value or the invocation
parameter value for the erroneously specified option.
Programmer response: Remove the option from the
*PROCESS statement and resubmit the assembly.
Severity: 2
ASMA416C • ASMA422N
336 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA423N Option yyyyyyyy in a *PROCESS
OVERRIDE statement conflicts with an
invocation or default option. Option is
not permitted in *PROCESS statement
and has been ignored.
Explanation: The option yyyyyyyy specified in a
*PROCESS OVERRIDE statement conflicts with an
invocation or default option. The option is not
permitted in a *PROCESS statement and has been
ignored.
System action: If installation option PESTOP is
specified, the assembler stops. If installation option
NOPESTOP is specified, the assembly continues using
the invocation or default option.
Programmer response: Correct the *PROCESS
OVERRIDE statement and resubmit the assembly.
Severity: 2
ASMA424W Continuation column is not blank.
*PROCESS statements may not be
continued.
Explanation: The continuation indicator field
(normally column 72) is not blank for a *PROCESS
statement. *PROCESS statements cannot be continued.
System action: If option PESTOP is specified, the
assembly stops. If option NOPESTOP is specified, the
assembly continues and processes the options specified.
Programmer response: Recode the *PROCESS
statement, leaving the continuation column blank. If
you need to specify more options that can fit on the
*PROCESS statement, add another *PROCESS statement
to your code. You can specify a maximum of 10
*PROCESS statements.
Severity: 4
ASMA425N Option conflict in invocation
parameters. yyyyyyyy overrides an earlier
setting.
Explanation: The option yyyyyyyy specified as an
invocation parameter in either the ASMAOPT file or
the invocation parameters overrides an earlier setting of
the option in either the same ASMAOPT file or the
invocation parameters.
System action: If installation option PESTOP is
specified, the assembler stops. If installation option
NOPESTOP is specified, the assembly continues using
the last specified conflicting option.
Programmer response: Correct the ASMAOPT file or
the invocation parameter and resubmit the assembly.
Severity: 2
ASMA426N Option conflict in *PROCESS
statements. yyyyyyyy overrides an earlier
setting.
Explanation: The option yyyyyyyy specified in a
*PROCESS statement overrides an earlier setting of the
option on the same statement or a previous *PROCESS
statement.
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues using
the last conflicting option encountered.
Programmer response: Correct the *PROCESS
statement error and resubmit the assembly.
Severity: 2
ASMA427N Invocation parameter option xxxxxxxx
ignored. This option is not valid under
z/VSE.
Explanation: The option xxxxxxxx specified in an
invocation parameter is not valid for the z/VSE
operating system.
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues and
the option is ignored.
Programmer response: Remove the option from the
invocation parameter and resubmit the assembly.
Severity: 2
ASMA428N *PROCESS statement option xxxxxxxx
ignored. This option is not valid under
z/VSE.
Explanation: The option xxxxxxxx specified in a
*PROCESS statement is not valid for the z/VSE
operating system.
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues and
the option is ignored.
Programmer response: Remove the option from the
*PROCESS statement and resubmit the assembly.
Severity: 2
ASMA429W SYSPRINT LRECL should be at least
133 when GOFF/XOBJECT option is
specified
Explanation: The GOFF or XOBJECT assembler option
has been specified, however the logical record length of
the listing file, SYSPRINT, is less than 133.
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
ASMA423N • ASMA429W
Appendix F. High Level Assembler messages 337
NOPESTOP is specified, the assembly continues,
however the lines in the source and object section are
truncated.
Programmer response: Specify a record length of at
least 133 for SYSPRINT.
Severity: 4
ASMA430W Continuation statement does not start in
continue column.
Explanation: The operand on the continued record
ends with a comma and a continuation statement is
present but the continue column is blank. The continue
column is column 16, unless you redefined it with an
ICTL instruction.
System action: Any remaining continuation lines
belonging to this statement are ignored.
Programmer response: Check that the continuation
was coded as intended.
Severity: 4
ASMA431W Continuation statement may be in error
- continuation indicator column is
blank.
Explanation: A list of one or more operands ends with
a comma, but the continuation indicator column is
blank. The continuation indicator column is column 72,
unless you redefined it with an ICTL instruction.
System action: The next statement assembles as a
standard assembler source statement.
Programmer response: Check that the continuation
was coded as intended.
Severity: 4
ASMA432W Continuation statement may be in error
- comma omitted from continued
statement.
Explanation: The continuation record starts in the
continue column (normally column 16) but there is no
comma present following the operands on the previous
record.
System action: Any remaining continuation lines
belonging to this statement are ignored.
Programmer response: Check that the continuation
was coded as intended.
Severity: 4
ASMA433W Statement not continued - continuation
statement may be in error
Explanation: The continued record is full but the
continuation record does not start in the continue
column (normally column 16).
System action: Any remaining continuation lines
belonging to this statement are ignored.
Programmer response: Check that the continuation
was coded as intended.
Severity: 4
ASMA434N GOFF/XOBJECT option specified,
option LIST(133) will be used
Explanation: You specified the GOFF or XOBJECT
option, and the LIST suboption is 121.
System action: The assembler sets the LIST suboption
to 133. If installation option PESTOP is specified, the
assembly stops. If installation option NOPESTOP is
specified, the assembly continues.
Programmer response: To prevent this warning
message, run the assembly again specifying GOFF and
LIST(133).
Severity: 2
ASMA435I Record n in xxxxxxx on volume: vvvvvv
Explanation: The data set xxxxxxxx which is located
on volume serial vvvvvv, contains an error on record
number n. The volume serial might not be available.
For an AINSERT instruction:
n The number of the statement within the AINSERT
internal buffer. This number might not reflect the
statement's relative statement number within the
buffer at the point of retrieval, but does reflect the
relative retrieval number. This is because it is
possible to insert records into the buffer after
statements have been retrieved from the buffer.
xxxxxxxx
The constant AINSERT BUFFER to indicate that the
statement resulted from an AINSERT instruction.
vvvvvv
is null.
System action: See the System Action section of the
error messages which immediately precede this
message.
Programmer response: Refer to the Programmer
Response section of the error messages which
immediately precede this message.
Severity: 0
ASMA436N Attempt to override invocation
parameter in a *PROCESS statement.
Option yyyyyyyy ignored.
Explanation: The option yyyyyyyy specified in a
*PROCESS statement conflicts with an option specified
either in the ASMAOPT file or in an invocation
parameter.
ASMA430W • ASMA436N
338 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
System action: If installation option PESTOP is
specified, the assembler stops. If installation option
NOPESTOP is specified, the assembly continues using
the option specified in the ASMAOPT file or the
invocation parameters.
Programmer response: Correct the *PROCESS
statement and resubmit the assembly.
Severity: 2
ASMA437N Attempt to override invocation
parameter in a *PROCESS statement.
Suboption yyyyyyyy of xxxxxxxx option
ignored.
Explanation: The suboption yyyyyyyy of option
xxxxxxxx specified on a *PROCESS statement conflicts
with a suboption specified in either the ASMAOPT file
or in the invocation parameters.
System action: If installation option PESTOP is
specified, the assembler stops. If installation option
NOPESTOP is specified, the assembly continues using
the suboption specified in the *PROCESS OVERRIDE
statement.
Programmer response: Correct the *PROCESS
statement and resubmit the assembly. the assembly.
Severity: 2
ASMA438N Attempt to override ASMAOPT
parameter. Option yyyyyyyy ignored
Explanation: The option yyyyyyyy specified as an
invocation parameter overrides the option specified in
the ASMAOPT file (CMS or z/OS) or Librarian
member (z/VSE).
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues using
the option specified in the ASMAOPT file (z/OS and
CMS) or library member (z/VSE).
Programmer response: Remove the option from the
invocation parameters and resubmit the assembly.
Severity: 2
ASMA439N Attempt to override ASMAOPT
parameter. Suboption yyyyyyyy of option
xxxxxxxx ignored
Explanation: The suboption xxxxxxxx of options
yyyyyyyy specified in an invocation parameter overrides
the suboption specified in the ASMAOPT file (z/OS
and CMS) or library member (z/VSE).
System action: If installation option PESTOP is
specified, the assembly stops. If installation option
NOPESTOP is specified, the assembly continues using
the suboption specified in the ASMAOPT file (z/OS
and CMS) or library member (z/VSE).
Programmer response: Remove the suboption from
the invocation parameters and resubmit the assembly.
Severity: 2
ASMA440N Attempt to override OVERRIDE
parameter in *PROCESS statement.
Option yyyyyyyy ignored.
Explanation: The option yyyyyyyy specified on a
*PROCESS statement conflicts with an option specified
in a previous *PROCESS OVERRIDE statement.
System action: If installation option PESTOP is
specified, the assembler stops. If installation option
NOPESTOP is specified, the assembly continues using
the option specified in the *PROCESS OVERRIDE
statement.
Programmer response: Correct the *PROCESS
statement and resubmit the assembly.
Severity: 2
ASMA441N Attempt to override OVERRIDE
parameter in a *PROCESS statement.
Suboption yyyyyyyy ignored.
Explanation: The suboption yyyyyyyy of option
xxxxxxxx specified on a *PROCESS statement conflicts
with a suboption specified in a previous *PROCESS
OVERRIDE statement.
System action: If installation option PESTOP is
specified, the assembler stops. If installation option
NOPESTOP i specified, the assembly continues using
the suboption specified in the *PROCESS OVERRIDE
statement.
Programmer response: Correct the *PROCESS
statement and resubmit the assembly.
Severity: 2
ASMA442N ASMAOPT internal buffer full - some
options ignored.
Explanation: The length of the options list provided
by the ASMAOPT file, including the delimiting
commas inserted by the assembler, exceeds 32766 bytes.
System action: The record which caused the message
to be generated, together with those records following,
is ignored.
Programmer response: Reduce the length of the
options list provided by the ASMAOPT file.
Severity: 2
ASMA437N • ASMA442N
Appendix F. High Level Assembler messages 339
ASMA443N ASMAOPT record format invalid -
options provided via ASMAOPT
ignored
Explanation: The ASMAOPT DD statement or
ASMAOPT FILEDEF refers to a file with a record
format that is neither fixed-length nor variable-length.
System action: The ASMAOPT file is not processed
and any options it contains are ignored.
Programmer response: Supply a file which is either
fixed-length or variable-length record format.
Severity: 2
ASMA500E Requested alignment exceeds section
alignment
Explanation: The section alignment is lower than that
requested on the instruction and hence the actual
alignment might not be honored.
System action: The requested alignment is ignored.
Programmer response: Change the requested
alignment to be less than or equal to that of the section,
or ensure that the wanted alignment is achieved during
program linking and loading.
Severity: 8
ASMA700I exit-type: exit supplied text
Explanation: The user supplied exit for exit-type exit
has requested the assembler to issue this message with
the exit supplied text.
System action: None
Programmer response: Check the user exit
documentation for the cause of this message and for
the correct response.
Severity: 0
ASMA701W exit-type: exit supplied text
Explanation: The user supplied exit for exit-type exit
has requested the assembler to issue this message with
the exit supplied text.
System action: None
Programmer response: Check the user exit
documentation for the cause of this message and for
the correct response.
Severity: 4
ASMA702E exit-type: exit supplied text
Explanation: The user supplied exit for exit-type exit
has requested the assembler to issue this message with
the exit supplied text.
System action: None
Programmer response: Check the user exit
documentation for the cause of this message and for
the correct response.
Severity: 8
ASMA703S exit-type: exit supplied text
Explanation: The user supplied exit for exit-type exit
has requested the assembler to issue this message with
the exit supplied text.
System action: None
Programmer response: Check the user exit
documentation for the cause of this message and for
the correct response.
Severity: 12
ASMA704C exit-type: exit supplied text
Explanation: The user supplied exit for exit-type exit
has requested the assembler to issue this message with
the exit supplied text.
System action: None
Programmer response: Check the installation
documentation for the cause of this message and for
the correct response.
Severity: 16
ASMA710I function-name: function-supplied text
Explanation: The user supplied function function-name
has requested the assembler to issue this message with
the function-supplied text.
System action: None
Programmer response: Check the external function
documentation for the cause of this message and for
the correct response.
Severity: 0
ASMA711W function-name: function-supplied text
Explanation: The user supplied function function-name
has requested the assembler to issue this message with
the function-supplied text.
System action: None
Programmer response: Check the external function
documentation for the cause of this message and for
the correct response.
Severity: 4
ASMA443N • ASMA711W
340 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMA712E function-name : function-supplied text
Explanation: The user supplied function function-name
has requested the assembler to issue this message with
the function-supplied text.
System action: None
Programmer response: Check the external function
documentation for the cause of this message and for
the correct response.
Severity: 8
ASMA713S function-name : function-supplied text
Explanation: The user supplied function function-name
has requested the assembler to issue this message with
the function-supplied text.
System action: None
Programmer response: Check the external function
documentation for the cause of this message and for
the correct response.
Severity: 12
ASMA714C function-name : function-supplied text
Explanation: The user supplied function function-name
has requested the assembler to issue this message with
the function-supplied text.
System action: None
Programmer response: Check the external function
documentation for the cause of this message and for
the correct response.
Severity: 16
Abnormal assembly termination messages
Whenever an assembly cannot complete, High Level Assembler provides a message and, in some cases, a
specially formatted dump for diagnostic information. This might indicate an assembler malfunction or it
might indicate a programmer error. The statement causing the error is identified and, if possible, the
assembly listing up to the point of the error is printed. The messages in this book give enough
information to enable you to correct the error and reassemble your program, or to determine that the
error is an assembler malfunction.
Note:
If SYSPRINT or SYSLST (z/VSE) is unavailable, the assembler uses the macro WTO with a route code of
11 and a descriptor code of 7, or the system defaults, to output the messages.
Messages
ASMA930U LOAD OF ASMA93 PHASE FAILED;
INSUFFICIENT GETVIS STORAGE OR
PHASE NOT FOUND
Explanation: The assembler attempted to load the
phase ASMA93, but the load failed either because there
was insufficient GETVIS storage available to complete
the load, or the phase could not be found.
Note: This message is only produced in uppercase
English.
System action: The assembly stops and no listing is
produced.
Programmer response: Check the LIBDEF chain to
ensure that the sublibrary containing High Level
Assembler is correctly concatenated. If it is, consider
increasing the partition size.
Severity: 20
ASMA932U Unable to load specified EXIT module -
xxxxxxxx
Explanation: The assembler attempted to load the
named exit module, but the load failed.
System action: The assembly stops and no listing is
produced.
Programmer response: Check that the specified exit
module is in a library accessible by the assembler.
Severity: 20
ASMA933U UNABLE TO LOAD SPECIFIED
MESSAGES MODULE - xxxxxxxx
Explanation: The assembler attempted to load the
named messages module, but the load failed. The name
of the messages module is determined from the value
specified in the LANGUAGE option.
Note: This message is only produced in uppercase
English.
System action: The assembly stops and no listing is
produced.
Programmer response: Check that you have correctly
ASMA712E • ASMA933U
Appendix F. High Level Assembler messages 341
specified the correct messages module using the
LANGUAGE option, and that the specified messages
module is in a library accessible by the assembler.
Severity: 20
ASMA934U UNABLE TO LOAD DEFAULT
OPTIONS MODULE - xxxxxxxx
Explanation: The assembler attempted to load the
named default options module, but the load failed.
Note: This message is only produced in uppercase
English.
System action: The assembly stops and no listing is
produced.
Programmer response: Check that the default options
module is in a library accessible by the assembler.
Severity: 20
ASMA935U One or more required files not available
Explanation: The assembler encountered an error
when attempting to open a required file.
System action: Before this message is issued, one or
more associated messages are issued that describe
which file or files could not be opened. After this
message is issued, the assembly stops.
Programmer response: Check the associated message
or messages.
Severity: 20
ASMA936U Assembly terminated due to errors in
invocation parameters
Explanation: The assembler detected an error in one
or more of the parameters specified when the
assembler was invoked, and the installation default
value for the PESTOP assembler option is YES.
System action: Before this message is issued, one or
more associated messages are issued that describe
which parameter or parameters were in error. After this
message is issued, the assembly stops.
Programmer response: Check the associated message
or messages. Invoke the assembler with correct
invocation parameters. Do not attempt to override the
fixed installation defaults.
Severity: 20
ASMA937U Unable to load specified translation
table - xxxxxxxx
Explanation: The assembler attempted to load the
translation table called xxxxxxxx, but the load failed.
The name of the translation table is determined from
the value specified in the TRANSLATE option.
System action: The assembly stops and no listing is
produced.
Programmer response: Check that you have correctly
specified the translation table module using the
TRANSLATE option, and the module is in a library
accessible by the assembler.
Severity: 20
ASMA938U Module xxxxxxxx is not a valid
translation table
Explanation: The translation table specified in the
TRANSLATE option is not valid.
System action: The assembly stops.
Programmer response: Ensure that the translation
table is generated according to the instructions
described in Appendix K, “How to generate a
translation table,” on page 365.
Severity: 20
ASMA939U Unable to load external function module
- xxxxxxxx
Explanation: The assembler attempted to load the
external function module xxxxxxxx, but the load failed.
System action: The assembly stops and no listing is
produced.
Programmer response: Check that the specified
module is in a library accessible by the assembler, and
that the external function name has been spelled
correctly in the SETAF or SETCF statement.
Severity: 20
ASMA940U exit-type exit has requested termination
during operation processing; exit error
text: < none | error text >
Explanation: The user supplied exit for exit-type failed
when processing an operation request. The exit might
have provided error text to assist in determination of
the failure.
System action: The assembly stops.
Programmer response: Check the specified exit
program for the cause of failure.
Severity: 20
ASMA941U external function name has requested
termination during processing.
Explanation: The user supplied external function
external function name failed during processing.
System action: The assembly stops.
Programmer response: Check the specified external
function program for the cause of failure.
ASMA934U • ASMA941U
342 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
Severity: 20
ASMA942U xxxxxxxx IS NOT A VALID MODULE
Explanation: The default options module ASMADOPT
is not in the required format for this release of the
assembler. The assembler checks to ensure that the
release of the module is the same as that of the
assembler.
Note: This message might be produced in uppercase
English, even if you have specified a different
language.
System action: The assembly terminates
Programmer response: Ensure that you have the
correct version of the ASMADOPT module available.
You might need to reassemble your default options
module with the current ASMAOPT macro.
Severity: 20
ASMA943U Unable to find listing header nnn
Explanation: The assembler tried to produce a
heading line in the assembler listing but could not find
the heading. This can be caused if the assembler load
module has been corrupted.
System action: The assembly is aborted.
Programmer response: Reassemble the program; it
might assemble correctly. If it does not reassemble
without error, save the output from the assembly, and
the input sources, and contact IBM for support.
Severity: 20
ASMA944U LOAD OF ASMA93 MODULE FAILED.
INSUFFICIENT GETMAIN STORAGE,
OR MODULE NOT FOUND
Explanation: The assembler attempted to load the
module ASMA93, but the load failed either because
there was insufficient main storage available to
complete the load, or the module could not be found,
or the Assembler was dynamically invoked by an
APF-authorized program yet the Assembler does not
reside in an APF-authorized library.
Note: This message is only produced in uppercase
English.
System action: The assembly stops and no listing is
produced.
Programmer response: on z/OS, ensure that the
correct High Level Assembler load library is available
in the standard load module search order. If the
assembler is invoked by an APF-authorized program
then ensure that the assembler resides in an
APF-authorized library. Check that there is sufficient
virtual storage available to the assembler and consider
increasing the region size.
On CMS, ensure that the correct mini disk containing
the High Level Assembler modules is being accessed. If
it is, consider increasing your virtual machine storage
size.
Severity: 20
ASMA945U Unable to load code page xxxxxxxx
Explanation: The assembler attempted to load the
Code Page module called xxxxxxxx, but the load failed.
The name of the module is determined from the value
specified in the CODEPAGE option.
System action: The assembly stops.
Programmer response: Check that you have correctly
specified the Code Page module using the CODEPAGE
option, and that the module is in a library accessible by
the assembler.
Severity: 20
ASMA946U Module ASMAxxxx is not a valid code
page module.
Explanation: The code page module specified in the
CODEPAGE option is not valid.
System action: The assembly stops.
Programmer response: Ensure that the code page
module is generated according to the instructions
described in Appendix L, “How to generate a Unicode
translation table,” on page 367.
Severity: 20
ASMA950U End of statement flag was expected in
Macro Edited Text, but was not found -
MACRO EDITOR is suspect
ASMA951U The MACRO GENERATOR has
encountered untranslatable Macro
Edited Text
ASMA952U Bad SET symbol name field or
LCL/GBL operand - check the Macro
Edited Text
ASMA953U Bad subscript on SET symbol - check
the Macro Edited Text
ASMA954U Character expression followed by bad
subscripts - check the Macro Edited Text
ASMA942U • ASMA954U
Appendix F. High Level Assembler messages 343
ASMA955U A right parenthesis with no matching
left parenthesis was found in an
expression - check the Macro Edited
Text or the expression analysis work
area
ASMA956U Multiple subscripts or bad SET symbol
terminator - check the Macro Edited Text
ASMA957U Bad terminator on created SET symbol -
check the Macro Edited Text
ASMA958U Bad terminator on parameter - check the
Macro Edited Text
ASMA960U A bad internal file number has been
passed to the xxxxxxxx internal storage
management routine
ASMA961U An invalid storage request has been
made, or the free storage chain pointers
have been destroyed
ASMA962U A zero block address or bad block
number has been passed to an internal
storage management routine
ASMA963U Invalid pointer at entry to utility routine
ASMA964U Macro Edited Text Flag is not ICTL
Explanation: The assembly stops because of one of the
errors described in ASMA950U through ASMA964U.
This is typically caused by an error in the assembler
itself. Under certain conditions, however, the assembly
can be rerun successfully.
System action: The assembly stops and a formatted
abnormal termination dump is produced. Depending
on where the error occurred, the assembly listing up to
the failing statement might also be produced. The
dump generally indicates which statement was being
processed at the time of abnormal termination. It also
might include contents of the assembler registers and
work areas and other status information for use by an
IBM support representative.
Programmer response: Check the statement that was
being processed at the time of abnormal termination.
Correct any errors in it or, if the statement is long or
complex, rewrite it. Reassemble the program; it might
assemble correctly. However, even if the program
assembles correctly, there might be a problem with the
assembler. Save the abnormal termination dump, the
assembly listing (if one was produced), and the source
program, and contact IBM for support.
Severity: 20
ASMA966U Insufficient partition GETVIS storage to
load xxxxxxxx; increase the partition
GETVIS size
Explanation: The assembler attempted to load the
named phase, but there was not enough GETVIS
storage available for the phase.
System action: The assembly stops and no listing is
produced.
Programmer response: Increase the amount of
GETVIS storage allocated to the partition.
Severity: 20
ASMA967U Insufficient partition GETVIS storage
for assembly initialization; increase the
partition GETVIS size
Explanation: The assembler attempted to acquire an
initial block of storage, but there is not enough GETVIS
storage available.
System action: The assembly stops and no listing is
produced.
Programmer response: Increase the amount of
GETVIS storage allocated to the partition.
Severity: 20
ASMA970U Statement complexity exceeded, break
the statement into segments, and rerun
the assembly
Explanation: The statement is too complex to be
evaluated by the macro generator phase of the
assembler. It overflowed the evaluation work area of
the assembler. Normally, there is no assembler
malfunction; the statement can be corrected and the
program reassembled successfully.
System action: A special abnormal termination dump
(High Level Assembler interrupt and diagnostic dump)
follows the message. The statement causing termination
is SETA, SETB, SETC, AGO, or AIF. The dump does not
indicate which statement caused termination; however,
it might show the last statement generated in the
macro. The dump might also include contents of the
assembler registers and work areas and other status
information for use by IBM or your assembler
maintenance programmers in determining the cause of
the termination. However, it is not needed unless the
error persists. This information could be helpful in
diagnosing and fixing an assembler error.
Programmer response: Check the statement that
caused termination. Rewrite the statement or split it
into two or more statements. Reassemble the program;
it should assemble correctly. However, if the error
persists, there might be an assembler malfunction. Save
the abnormal termination dump, the assembly listing (if
one was produced), and the input sources, and contact
IBM for support.
ASMA955U • ASMA970U
344 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
Severity: 20
ASMA971U Insufficient storage available for Macro
Editor work area
ASMA972U Virtual storage exhausted; increase the
SIZE option
Explanation: The size of the dynamic storage area
allocated for assembler buffer areas, tables, and work
areas, as specified in the SIZE option, is not enough for
the assembly to complete.
System action: A special abnormal termination dump
(High Level Assembler interrupt and diagnostic dump)
follows the message. The dump normally indicates the
statement being processed when the assembler
determined there was not enough dynamic storage
available to continue. Depending on where the error
occurred, the assembly listing up to the statement being
processed might also be produced. The other
information in the dump, such as register and work
area contents, is not needed.
Programmer response: Increase the value specified in
the SIZE option, or split the assembly into two or more
assemblies. Check for conditional assembly language
loops in open code that could cause the symbol table to
overflow.
Severity: 20
ASMA974U Insufficient storage available to satisfy
the SIZE option
Explanation: The assembler attempted to acquire the
amount of storage specified in the SIZE option, but
there was not enough available storage in the region
(z/OS), virtual machine (CMS), or partition GETVIS
(z/VSE).
System action: The assembly stops and no listing is
produced.
Programmer response: Increase the region size (z/OS),
the virtual machine size (CMS), or the partition GETVIS
(z/VSE) size, or reduce the size requested in the SIZE
option.
Severity: 20
ASMA975U SIZE option specifies insufficient
storage for assembly
Explanation: The SIZE option was specified as
MAX-nnnK or MAX-nnM, but the amount of storage
available to the assembler using this formula is not
enough for the assembly to continue. The assembler
requires a minimum of either 200 KB or 10 times the
work file blocksize, plus 20 KB, of working storage in
the region (z/OS), virtual machine (CMS), or partition
GETVIS (z/VSE) to proceed.
System action: The assembly stops and no listing is
produced.
Programmer response: Increase the region size (z/OS),
virtual machine size (CMS), or the partition GETVIS
(z/VSE) size, or reduce the amount of storage to be
reserved in the MAX-nnnK or MAX-nnM form of the
SIZE option.
Severity: 20
ASMA976U Statement too complex for expression
analysis
Explanation: The statement is too complex to be
analyzed by the expression analysis routine of the
assembler. It overflowed the analysis work area. The
size of the analysis work area is the same as the work
file block size. Normally, there is no problem with the
assembler. The statement can be rewritten to simplify it,
and the program reassembled successfully.
System action: The assembly stops and a formatted
abnormal termination dump is produced. The dump
indicates which statement was being processed at the
time of abnormal termination. It also includes the
contents of the assembler registers and work areas and
other status information that might be required by an
IBM support representative if the problem persists.
Programmer response: Check the statement that was
being processed at the time of abnormal termination.
Rewrite the statement or split it into two or more
statements. Alternatively, increase the work file block
size. Reassemble the program; it should assemble
correctly. However, if the problem persists, there might
be a problem with the assembler. Save the abnormal
termination dump, the assembly listing (if one was
produced), and the input sources, and contact IBM for
support.
Severity: 20
ASMA990U Location Counter does not match
symbol table value
Explanation: A difference has been detected between
the symbol table and the location counter. The
assembly stops and a special abnormal termination
dump (High Level Assembler interrupt and diagnostic
dump) is taken. The listing is not completed.
System action: The High Level Assembler interrupt
and diagnostic dump shows the statement that was
being printed when the difference between the location
counter and the symbol table was detected.
Programmer response: Reassemble the program using
NOALIGN. If alignment is needed, use CNOP or DS to
force alignment.
Severity: 20
ASMA971U • ASMA990U
Appendix F. High Level Assembler messages 345
ASMA998U The assembler could not resume reading
a LIBRARY member because it could
not FIND the member again
Explanation: The assembly stops, because the
assembler cannot find a COPY member that it has
already read. This is typically caused by an error in the
assembler itself or by an Operating System I/O error.
Under certain conditions, however, the assembly can be
rerun successfully.
System action: A special abnormal termination dump
(High Level Assembler interrupt and diagnostic dump)
follows the message. The dump normally indicates
which statement caused termination. It also might
include contents of the assembler registers and work
areas and other status information for use by IBM or
your assembler maintenance programmers in
determining the cause of the termination.
Programmer response: Reassemble the program; it
might assemble correctly. If it does not reassemble
without error, save the abnormal termination dump,
the assembly listing (if one was produced), and the
input sources, and contact IBM for support.
Severity: 20
ASMA999U Assembly terminated - SYNAD Exit
taken - Permanent I/O error on xxxxxxx
data set
Explanation: The assembly was stopped because of a
permanent I/O error on the data set indicated in the
message. This is typically caused by a machine or an
operating system error. The assembly can generally be
rerun successfully. This message also appears on the
console output device.
System action: A special abnormal termination dump
(High Level Assembler interrupt and diagnostic dump)
follows the message. Depending on where the error
occurred, the assembly listing up to the bad statement
might also be produced. The dump generally indicates
which statement caused termination. It also might
include contents of the assembler registers and work
areas and other status information for use by IBM or
your assembler maintenance programmers in
determining the cause of the termination.
Programmer response: If the I/O error is on SYSIN or
SYSLIB, you might have concatenated the input or
library data sets incorrectly. Make sure that all input or
library data sets have the same device class (all DASD
or all tape). Also check that file attributes such as
DSORG, RECFM, LRECL, and BLKSIZE have been
correctly specified.
If the I/O error is on SYSUT1, check that SYSUT1 is
allocated to a single volume—the assembler does not
support a multivolume work file.
Reassemble the program; it might assemble correctly. If
it does not reassemble without error, save the abnormal
termination dump, the assembly listing (if one was
produced), and the input sources, and contact IBM for
support. Also, if the program assembles correctly,
submit a copy of the listing and input sources of the
correct assembly.
Severity: 20
ASMAHL Command Error Messages (CMS)
ASMACMS002E File fn ft fm not found
Explanation: The file name you included in the
ASMAHL command does not correspond to the names
of any of the files on your disks.
Supplemental Information: The variable file name, file
type, and file mode in the text of the message indicate
the file that could not be found.
System action: RC=28. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Reissue the ASMAHL with the
correct file name.
ASMACMS003E Invalid option option
Explanation: You have included an option that is not
correct with your ASMAHL command.
Supplemental Information: The variable option in the
text of the message indicates the option that is not
correct.
System action: RC=24. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Check the format of the
ASMAHL command, and reissue the command with
the correct option.
ASMACMS004E Improperly formed option option
Explanation: You have included an improperly
formed option with your ASMAHL command.
Supplemental Information: The variable option in the
text of the message indicates the improperly formed
option.
System action: RC=24. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Check the format of the
ASMAHL command, and reissue the command with
the correct option.
ASMA998U • ASMACMS004E
346 High Level Assembler for z/OS & z/VM & z/VSE: Programmer's Guide
ASMACMS005E Truncation of options may have
occurred because of tokenized PLIST
format
Explanation: The options have been passed to the
ASMAHL command in tokenized PLIST format. Any
options passed might have been truncated to eight
characters. This message is only issued when an error
has been detected in one of the options that was
specified.
System action: The options are accepted as entered
but might have been truncated.
Programmer response: If the options have been
truncated, invoke the ASMAHL command with the
extended parameter list. If the SYSPARM option has
been truncated, specify SYSPARM(?).
ASMACMS006E No read/write disk accessed
Explanation: Your virtual machine configuration does
not include a read/write disk for this terminal session,
or you failed to specify a read/write disk.
System action: RC=36. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Issue an ACCESS command
specifying a read/write disk.
ASMACMS007E File 'fn ft fm' does not contain fixed
length 80 character records
Explanation: The source file you specified in the
ASMAHL command does not contain fixed-length
records of 80 characters.
Supplemental Information: The variable file name, file
type, and file mode in the text of the message indicate
the file that is in error.
System action: RC=32. The command cannot be
processed.
Programmer response: You must reformat your file
into the correct record length. CMS XEDIT or
COPYFILE can be used to reformat the file.
ASMACMS010E file name omitted and FILEDEF
'ddname' is undefined
Explanation: You have not included a file name in the
ASMAHL command, and no FILEDEF could be found
for the ddname specified.
System action: RC=24. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Reissue the ASMAHL
command and specify a file name, or issue a FILEDEF
for the ddname specified.
ASMACMS011E file name omitted and FILEDEF
'ddname' is not for DISK
Explanation: You have not included a file name in the
ASMAHL command, and the FILEDEF for the ddname
specified is not for DISK.
System action: RC=24. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Reissue the ASMAHL
command and specify a file name, or reissue the
FILEDEF for the ddname specified with a device type
of 'DISK'.
ASMACMS038E Filename conflict for the SYSIN
FILEDEF.
Explanation: The file name specified on the ASMAHL
command conflicts with the file name on the FILEDEF
for the SYSIN ddname.
System action: RC=40. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Reissue the FILEDEF
command or the ASMAHL command specifying the
same file name.
ASMACMS040E Saved segment xxxxxxxx does not
exist
Explanation: The specified saved segment has not
been included in the System Names Table (SNT).
System action: RC=40. Processing of the command
terminates.
Programmer response: See your system administrator.
ASMACMS041E The storage for saved segment
xxxxxxxx is already in use
Explanation: The storage for the specified saved
segment has already been used by another saved
segment.
System action: RC=40. Processing of the command
terminates.
Programmer response: See your system administrator.
ASMACMS042E SEGMENT error nnn loading saved
segment xxxxxxxx
Explanation: An error occurred when the ASMAHL
command attempted to load the specified saved
segment.
System action: RC=40. Processing of the command
terminates.
Programmer response: See your system administrator.
ASMACMS005E • ASMACMS042E
Appendix F. High Level Assembler messages 347
ASMACMS043E DIAGNOSE error nnn loading
saved segment xxxxxxxx
Explanation: An error occurred when the ASMAHL
command attempted to load the specified saved
segment.
System action: RC=40. Processing of the command
terminates.
Programmer response: See your system administrator.
ASMACMS044E NUCXLOAD error nnn loading
xxxxxxxx module
Explanation: An error occurred when the ASMAHL
command attempted to load the specified module.
System action: RC=40. Processing of the command
terminates.
Programmer response: See your system administrator.
ASMACMS052E Option list exceeds 512 characters.
Explanation: The string of options that you specified
with your ASMAHL command exceeded 512 characters
in length.
System action: RC=24. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Reissue your ASMAHL
command with fewer options specified.
ASMACMS062E Invalid character c in file name
xxxxxxxx
Explanation: A character that is not permitted was
specified in the file name specified on the ASMAHL
command.
System action: RC=40. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Check the format of the option
with its correct parameters, and reissue the command
with the correct parameter.
ASMACMS070E Left parenthesis '(' required before
option list
Explanation: An option was specified after the file
name but before the left parenthesis on the ASMAHL
command.
System action: RC=40. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Issue the ASMAHL command
again with the option specified after the left
parenthesis. Only the file name can be specified before
the left parenthesis.
ASMACMS074E Required module xxxxxxxx
MODULE not found
Explanation: The ASMAHL command was unable to
load the specified module.
System action: RC=40. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Verify that you have accessed
the disk containing the assembler and issue the
ASMAHL command again.
ASMACMS075E Device device invalid for xxxxxxxx
Explanation: The device specified in your FILEDEF
command cannot be used for the input or output
operation that is requested in your program. For
example, you have tried to read data from the printer
or write data to the reader.
Supplemental Information: The variable device name
in the text of the message indicates the incorrect device
that was specified.
System action: RC=40. Processing of the command
terminates. The system remains in the same status as
before the command was entered.
Programmer response: Reissue your FILEDEF
command, specifying the correct device for the required
input operation.
ASMACMS076E xxxxxxxx MODULE IS NOT IN
RELEASE 6 FORMAT
Explanation: The module xxxxxxxx is not in the
required format for Release 6.
Note: This message is only produced in uppercase
English.
System action: RC=40. Processing of the command
terminates.
Programmer response: Ensure that you have the
correct version of the module available. Check the disks
you have linked, and make sure that you are not
accessing modules from an earlier release of High Level
Assembler. If the module is ASMADOPT, you might
need to reassemble your default options module with
the ASMAOPT macro provided with High Level
Assembler Release 6. If you cannot resolve the problem,
contact your High Level Assembler maintenance
programmer, or your IBM service representative.
ASMACMS043E • ASMACMS076E
